var salesProcessStepNumb = 0,
nextdate = 0,
cancelMembPopoverOpt = {
	html: true,
	content: "<a class='btn btn-default m-r-10 cancel-delete-event' href='#'><i class='fa fa-times'></i> No</a> <a class='btn btn-red' href='#' id='cancelMemb'><i class='glyphicon glyphicon-trash'></i> Yes</a>",
	container: popoverContainer,
	title: "<strong>Cancel this membership?</strong>",
	trigger: 'manual'
},
subviewOpen = false;

function toggleNotes(elem){
	var notesRow = $(elem).closest('.form-group').next();
	if($(elem).val() == 'Yes')
		notesRow.removeClass('hidden');
	else
		notesRow.addClass('hidden');
}
function toggleSmokeDays(){
	var smokeDd = $('select[name="smoking"]');
	var smokeAmnt = $('#smokeAmnt');
	if(smokeDd.val() == 'Yes')
		$(smokeAmnt).removeClass('hidden');
	else
		$(smokeAmnt).addClass('hidden');
}

function toggleReference(val, modal){
	if(typeof modal != 'undefined' && modal){
		if(!val){
			var refNet = modal.find('input[name="refereModalReferralNetwork"]:checked');
			val = refNet.val();
		}
		var clientList = modal.find('#refereModalClientList');
		var staffList = modal.find('#refereModalStaffList');
		var proList = modal.find('#refereModalProList');
	}
	else{
		var refNet = 'input[name="referralNetwork"]';
		var clientList = $('#clientList');
		var staffList = $('#staffList');
		var proList = $('#proList');

		if(!val)
			val = $(refNet+':checked').val()
	}

	if(val == 'Client'){
		clientList.removeClass('hidden');
		staffList.addClass('hidden');
		proList.addClass('hidden');
	}
	else if(val == 'Staff'){
		staffList.removeClass('hidden');
		proList.addClass('hidden');
		clientList.addClass('hidden');
	}
	else if(val == 'Professional network'){
		proList.removeClass('hidden');
		clientList.addClass('hidden');
		staffList.addClass('hidden');
	}
	else{
		clientList.addClass('hidden');
		proList.addClass('hidden');
		staffList.addClass('hidden');
	}
}
function toggleMeasureDd(measure, elem, init){
	var metricDd, ImpDd, currUnit, cmVal, feetVal, inchVal, ImpToMet, metToImp;
	if(measure == 'height'){
		metricDd = $('select#metricHeight');
		ImpDd = $('select#imperialHeight');
		currUnit = $('input[name="heightUnit"]');
		cmVal = metricDd.find(":selected").data('value');
		feetVal = ImpDd.find(":selected").data('feet');
		inchVal = ImpDd.find(":selected").data('inch');
		if(init){
			if(currUnit.val() == 'Metric' || currUnit.val() == ''){
				ImpDd.selectpicker('hide');
				elem.text('Show Imperial');
				ImpDd.prop("disabled", true);
			}
			else{
				metricDd.selectpicker('hide');
				elem.text('Show Metric');
				metricDd.prop("disabled", true);
			}
			return;
		}
	}
	else if(measure == 'weight'){
		metricDd = $('select#metricWeight');
		ImpDd = $('select#imperialWeight');
		currUnit = $('input[name="weightUnit"]');
		kgVal = metricDd.find(":selected").data('value');
		poundVal = ImpDd.find(":selected").data('value');
		if(init){
			if(currUnit.val() == 'Metric' || currUnit.val() == ''){
				ImpDd.selectpicker('hide');
				elem.text('Show Imperial');
				ImpDd.prop("disabled", true);
			}
			else{
				metricDd.selectpicker('hide');
				elem.text('Show Metric');
				metricDd.prop("disabled", true);
			}
			return;
		}
	}
	if(currUnit.val() == 'Imperial'){		//switching to metric
		if(measure == 'weight')
			ImpToMet = Math.round(poundVal/2.2);
		else if(measure == 'height')
			ImpToMet = Math.round((feetVal*30)+(inchVal*2.5));
		metricDd.selectpicker('show');
		metricDd.prop("disabled", false);
		metricDd.find("option[data-value='"+ImpToMet+"']").prop('selected', true);
		metricDd.selectpicker('refresh');
		ImpDd.selectpicker('hide');
		ImpDd.prop("disabled", true);
		currUnit.val('Metric');
		elem.text('Show Imperial');
	}
	else{	//switching to imperial
		if(measure == 'weight')
			metToImp = Math.round(kgVal*2.2);
		
		else if(measure == 'height'){
			var inches = cmVal/2.54;
			var cmToFeet = Math.floor(inches/12);
			var cmToInch = inches%12;
			ImpDd.find("option[data-feet='"+cmToFeet+"'][data-inch='"+cmToInch+"']").prop('selected', true);
		}
		
		metricDd.selectpicker('hide');
		metricDd.prop("disabled", true);
		ImpDd.find("option[data-value='"+metToImp+"']").prop('selected', true);
		ImpDd.selectpicker('show');
		ImpDd.prop("disabled", false);
		currUnit.val('Imperial');
		elem.text('Show Metric');
		ImpDd.selectpicker('refresh');
	}	
}
function updateState(contryDd){
	contryDd = $('#addressModal select[name="country"]');
	var country_code = contryDd.val();

	if(country_code == "" || country_code == "undefined")
		return false;

	$.ajax({
		url: public_url+'countries/'+country_code,
		method: "get",
		data: {},
		success: function(data) {
			var selectedStates = contryDd.closest('.modal-body').find('select[name="addrState"]');
			var defaultState = selectedStates.data('selected');

			selectedStates.html("");
			$.each(data, function(val, text){
				var option = '<option value="' + val + '"';
				if(defaultState != '' && defaultState != null && val == defaultState)
					option += ' selected';
				option += '>' + text + '</option>';
				selectedStates.append(option);
			});

			contryDd.selectpicker('refresh');
			selectedStates.selectpicker('refresh');
		}
	});
}
function closeContactNoteSubview(e){
	if(e) e.preventDefault();
	$('#contact_note').hide("slide", {direction:"right"}, 500);
}
var maleAreas = {
	'ankle-n-foot': [ "791,2540,818,2537,841,2531,860,2523,876,2514,881,2534,886,2556,895,2581,899,2595,900,2616,898,2633,900,2657,901,2693,903,2707,907,2722,907,2746,901,2766,890,2771,860,2772,841,2772,809,2769,780,2767,774,2755,767,2738,770,2723,781,2709,801,2666,804,2646,797,2622,791,2539", "945,2530,960,2539,992,2550,1009,2555,1032,2553,1029,2581,1030,2641,1026,2656,1026,2671,1043,2703,1063,2724,1068,2739,1066,2748,1058,2763,1044,2764,958,2769,942,2761,932,2750,927,2742,928,2710,929,2663,929,2604,940,2572",
	"1958,2479,1974,2491,1984,2503,1991,2520,1997,2544,2011,2579,2028,2607,2038,2612,2051,2590,2052,2556,2056,2511,2062,2470,2072,2436,2069,2475,2066,2510,2066,2554,2074,2608,2084,2639,2084,2667,2084,2699,2086,2739,2084,2763,2075,2780,2016,2781,1998,2771,1945,2753,1940,2737,1950,2719,1970,2709,1988,2693,1982,2673,1982,2654,1980,2588", "2139,2440,2149,2461,2154,2488,2158,2519,2161,2567,2174,2610,2188,2603,2194,2587,2206,2550,2225,2491,2249,2454,2238,2504,2227,2549,2220,2591,2218,2657,2214,2673,2212,2689,2224,2709,2241,2724,2242,2743,2227,2757,2202,2757,2177,2765,2150,2766,2132,2763,2116,2749,2102,2736,2100,2716,2112,2697,2115,2649,2115,2627,2124,2596,2133,2561,2140,2507" ],
	'elbows-n-arms' : [ "551,1415,587,1416,603,1421,611,1378,626,1330,642,1281,662,1220,673,1161,679,1085,680,1077,687,1047,697,1015,681,973,669,912,682,815,666,772,640,790,611,821,583,871,571,937,558,1021,538,1085,530,1130,527,1179,528,1259,521,1377,513,1417", "1200,1432,1239,1433,1276,1437,1277,1409,1272,1323,1282,1175,1276,1109,1265,1069,1251,949,1231,869,1202,822,1163,789,1148,830,1143,890,1145,965,1144,976,1123,1027,1137,1112,1137,1190,1143,1233,1168,1332,1182,1387,1189,1436", "1751,1461,1793,1465,1815,1458,1819,1449,1827,1391,1859,1272,1873,1193,1873,1114,1893,1007,1895,961,1881,901,1865,851,1869,815,1845,804,1832,803,1816,811,1795,843,1765,880,1761,926,1752,1004,1744,1075,1728,1140,1726,1198,1730,1263,1736,1344,1731,1427,1729,1451", "2422,1444,2452,1447,2477,1442,2497,1434,2501,1426,2496,1393,2489,1347,2487,1291,2489,1204,2488,1146,2479,1093,2456,1014,2446,947,2435,898,2435,863,2402,814,2376,792,2351,788,2320,799,2328,849,2319,867,2309,900,2301,941,2301,977,2320,1028,2337,1108,2338,1150,2346,1208,2356,1247,2410,1438" ],
	'hips-n-lower-back' : [ "657,1660,659,1638,664,1614,674,1586,683,1554,696,1527,708,1500,717,1480,722,1459,730,1432,733,1416,742,1403,738,1381,737,1367,732,1347,735,1317,724,1297,716,1286,703,1269,700,1259,693,1280,680,1334,673,1387,662,1447,653,1524,652,1613", "1145,1646,1148,1590,1143,1529,1135,1481,1127,1424,1122,1386,1117,1342,1114,1299,1109,1283,1076,1327,1067,1379,1064,1432,1078,1488", "1912,1922,1912,1893,1908,1858,1899,1829,1889,1774,1881,1729,1875,1656,1880,1586,1890,1549,1901,1587,1909,1638,1911,1659,1914,1687,1920,1665,1930,1637,1943,1619,1958,1615,2014,1611,2056,1604,2089,1585,2113,1556,2127,1551,2147,1570,2183,1586,2225,1594,2289,1603,2305,1629,2312,1664,2314,1677,2319,1672,2327,1639,2330,1616,2332,1589,2336,1569,2340,1536,2344,1563,2344,1583,2347,1613,2347,1648,2338,1727,2326,1798,2314,1845,2310,1866,2323,1833,2333,1785,2347,1724,2355,1664,2360,1620,2360,1541,2357,1504,2351,1453,2342,1404,2333,1345,2324,1295,2311,1260,2306,1235,2294,1236,2274,1247,2249,1266,2217,1290,2182,1317,2134,1337,2103,1346,2087,1339,2062,1330,2022,1313,1989,1290,1951,1271,1923,1259,1900,1254,1899,1290,1891,1339,1888,1387,1880,1436,1867,1523,1861,1610,1868,1725,1893,1849" ],
	'head' : [ "910,569,933,567,952,555,971,538,994,518,1011,493,1017,440,1025,447,1038,431,1047,411,1054,378,1048,362,1039,360,1031,367,1033,315,1028,286,1004,247,965,219,920,208,889,210,870,219,859,223,828,246,805,287,801,303,802,338,805,370,797,362,787,362,784,378,788,398,794,420,805,446,817,447,822,491,841,524,867,551,892,569", "2001,490,2022,448,2033,424,2050,412,2078,411,2104,412,2136,425,2154,448,2169,476,2174,494,2177,501,2187,488,2188,472,2192,446,2204,445,2213,424,2223,393,2226,370,2219,359,2208,361,2205,366,2205,337,2206,299,2201,276,2183,246,2163,230,2139,216,2113,206,2076,205,2042,215,2008,239,1996,251,1979,286,1975,308,1978,362,1976,367,1971,358,1961,359,1955,368,1956,397,1974,441,1984,445,1993,441" ],
	'knee-n-legs' : [ "809,2543,838,2533,867,2521,881,2512,878,2495,876,2476,875,2436,877,2405,879,2378,880,2359,884,2294,887,2253,884,2209,874,2162,870,2127,867,2114,866,2098,873,2071,879,2048,883,2008,888,1962,889,1926,886,1876,884,1827,891,1775,895,1740,898,1705,898,1660,896,1615,894,1596,887,1571,882,1546,873,1538,856,1514,842,1491,821,1446,791,1387,771,1346,751,1322,740,1308,722,1295,729,1412,715,1460,689,1516,660,1607,651,1642,670,1755,692,1851,710,1909,724,2035,721,2135,716,2231,724,2280,748,2382,793,2541", "958,2534,981,2548,1005,2555,1019,2557,1036,2556,1040,2535,1048,2480,1063,2417,1087,2331,1097,2240,1091,2150,1086,2111,1085,2062,1086,2024,1089,1989,1092,1961,1095,1944,1097,1926,1110,1877,1122,1820,1138,1737,1145,1669,1148,1638,1142,1618,1137,1589,1120,1554,1101,1510,1082,1459,1072,1408,1076,1369,1077,1331,1070,1327,1057,1335,1037,1358,1000,1414,971,1463,936,1516,905,1554,903,1602,900,1629,899,1654,900,1705,910,1777,921,1933,919,1957,918,1984,933,2089,946,2125,934,2186,927,2288,946,2467,946,2530", "2030,2641,2040,2642,2055,2629,2058,2612,2059,2580,2062,2551,2066,2526,2071,2498,2070,2476,2074,2448,2078,2413,2080,2381,2085,2354,2089,2309,2087,2271,2085,2237,2078,2210,2075,2175,2070,2142,2074,2118,2080,2099,2084,2074,2087,2051,2092,2017,2095,1983,2094,1940,2093,1868,2100,1798,2109,1737,2112,1682,2111,1648,2109,1610,2107,1579,2105,1570,2096,1578,2081,1590,2047,1602,2015,1609,1975,1611,1945,1615,1925,1642,1917,1669,1914,1675,1914,1658,1913,1636,1909,1621,1907,1594,1902,1577,1898,1561,1894,1544,1886,1546,1881,1568,1878,1602,1874,1633,1873,1677,1874,1728,1879,1774,1899,1873,1916,1929,1924,2008,1929,2113,1921,2204,1917,2259,1916,2305,1929,2380,2010,2596,2017,2619", "2164,2637,2184,2623,2196,2604,2202,2566,2215,2529,2230,2500,2244,2469,2253,2451,2271,2403,2284,2358,2295,2306,2302,2252,2298,2183,2292,2105,2292,2042,2296,1978,2307,1902,2316,1853,2338,1766,2350,1699,2357,1637,2357,1603,2353,1578,2350,1557,2341,1526,2335,1541,2323,1599,2315,1662,2311,1636,2304,1615,2292,1598,2268,1590,2246,1588,2217,1585,2197,1581,2175,1579,2142,1562,2130,1551,2119,1575,2115,1618,2112,1661,2117,1741,2124,1799,2126,1875,2125,1935,2124,1980,2130,2020,2142,2096,2148,2129,2140,2184,2132,2221,2128,2281,2130,2355,2142,2465,2144,2503,2152,2608,2153,2630" ],
	'mid-upper-back' : [ "1902,1275,1928,1282,1950,1290,1979,1305,1984,1286,1995,1254,2004,1221,2017,1184,2029,1148,2044,1124,2073,1097,2125,1096,2150,1111,2186,1146,2201,1182,2207,1209,2217,1240,2221,1269,2236,1286,2253,1289,2272,1270,2293,1255,2301,1240,2307,1237,2306,1212,2302,1188,2295,1156,2292,1122,2297,1083,2308,1036,2318,1018,2315,998,2310,971,2308,939,2312,910,2325,873,2335,823,2325,801,2356,791,2380,794,2372,771,2355,754,2339,745,2319,733,2303,725,2245,704,2233,696,2217,688,2160,683,2047,691,1957,695,1948,704,1942,711,1922,726,1878,731,1836,757,1813,807,1826,806,1865,812,1863,839,1873,896,1885,916,1890,1007,1886,1034,1894,1067,1906,1135,1896,1215" ],
	'neck' : [ "685,633,703,637,723,643,751,649,786,650,816,654,848,653,874,661,891,666,902,681,915,687,941,673,953,666,970,661,1032,661,1074,663,1117,659,1150,654,1165,650,1143,637,1105,623,1065,594,1017,560,1009,518,1010,497,1000,504,985,520,970,535,951,548,939,560,922,560,899,562,869,546,857,533,839,517,834,517,834,543,816,567,778,589,743,612", "1839,660,1857,671,1879,684,1916,696,1962,704,1960,707,1984,716,2020,716,2049,721,2085,725,2124,725,2156,718,2191,716,2203,713,2228,711,2252,699,2300,688,2337,664,2350,647,2326,636,2281,621,2240,596,2195,569,2176,547,2177,516,2176,502,2181,491,2177,469,2174,451,2168,426,2159,421,2143,414,2126,409,2112,407,2097,404,2080,407,2059,410,2039,416,2017,435,2006,466,1996,487,1996,510,2001,552,1996,564,1974,584,1934,612,1900,634" ],
	'shoulders' : [ "574,925,578,899,580,866,576,839,574,802,572,781,573,754,580,731,591,705,610,680,628,661,650,647,698,628,705,625,746,634,819,643,878,643,896,644,907,651,897,664,870,666,852,661,834,657,801,656,785,664,728,690,683,734,662,774,638,799,604,840", "946,668,978,661,1021,661,1054,681,1087,697,1126,717,1146,745,1156,778,1171,805,1199,829,1222,863,1238,918,1250,951,1247,899,1248,875,1258,820,1258,778,1248,734,1221,689,1185,660,1156,642,1139,639,1049,649,1021,647,993,645,959,647,941,652,941,660", "1760,893,1754,862,1748,825,1750,789,1760,738,1785,698,1819,667,1857,650,1865,651,1883,671,1930,688,1953,697,1963,716,1949,724,1925,732,1901,735,1865,740,1831,772", "2224,708,2232,688,2257,683,2301,664,2329,638,2341,640,2372,657,2403,684,2425,718,2439,759,2443,812,2439,845,2436,877,2426,871,2416,852,2398,831,2385,808,2357,771,2323,745,2286,729,2265,721" ],
	'wrist-n-hand' : [ "409,1564,431,1545,451,1526,462,1495,477,1467,502,1444,511,1424,512,1405,523,1412,546,1412,569,1410,589,1409,606,1410,605,1417,601,1445,599,1466,602,1479,606,1501,606,1538,606,1567,602,1585,599,1602,598,1616,596,1647,590,1672,584,1681,572,1680,568,1661,569,1633,572,1606,572,1591,568,1594,566,1610,562,1635,560,1670,556,1696,552,1710,542,1719,533,1713,528,1699,531,1682,533,1643,534,1605,534,1594,529,1611,525,1639,520,1665,518,1701,512,1723,501,1733,488,1726,488,1704,490,1663,493,1625,500,1597,499,1589,492,1606,486,1639,480,1660,478,1685,472,1697,461,1704,449,1697,449,1671,452,1635,461,1595,463,1564,457,1570,441,1578,425,1582,414,1578,411,1571", "1189,1426,1209,1425,1231,1426,1255,1423,1276,1427,1281,1434,1281,1447,1282,1455,1301,1477,1321,1498,1335,1533,1356,1565,1380,1583,1377,1599,1363,1603,1339,1594,1325,1581,1324,1586,1323,1604,1326,1627,1331,1652,1333,1673,1333,1711,1326,1723,1312,1723,1305,1705,1301,1680,1295,1647,1291,1625,1287,1607,1285,1616,1288,1637,1291,1663,1292,1694,1293,1720,1294,1732,1287,1750,1279,1754,1269,1750,1263,1716,1260,1676,1256,1637,1252,1617,1249,1629,1252,1653,1252,1675,1253,1704,1253,1721,1246,1738,1235,1737,1223,1716,1222,1667,1217,1611,1213,1619,1214,1645,1216,1662,1214,1692,1204,1701,1194,1689,1189,1652,1185,1611,1183,1588,1185,1507,1192,1480", "1628,1575,1648,1559,1669,1543,1680,1511,1692,1491,1719,1470,1729,1451,1728,1436,1742,1444,1757,1451,1777,1452,1791,1454,1804,1450,1820,1443,1822,1452,1819,1479,1818,1487,1827,1512,1827,1553,1826,1584,1822,1620,1820,1647,1818,1680,1815,1691,1808,1698,1797,1695,1794,1679,1794,1656,1794,1611,1790,1614,1786,1658,1785,1709,1779,1731,1765,1735,1755,1725,1757,1660,1758,1614,1751,1650,1749,1682,1745,1728,1743,1742,1734,1753,1721,1750,1714,1739,1714,1718,1715,1664,1723,1615,1720,1612,1718,1623,1711,1661,1706,1696,1702,1714,1696,1723,1680,1722,1673,1692,1678,1647,1683,1607,1686,1575,1675,1586,1656,1596,1636,1596,1628,1590", "2419,1671,2414,1615,2408,1577,2405,1533,2405,1497,2414,1472,2414,1437,2423,1437,2443,1438,2477,1431,2503,1422,2505,1444,2521,1457,2540,1476,2555,1500,2563,1523,2578,1539,2601,1559,2599,1571,2582,1575,2556,1569,2549,1560,2547,1569,2552,1590,2559,1648,2563,1682,2560,1699,2551,1706,2532,1690,2529,1661,2519,1617,2515,1590,2511,1596,2519,1638,2522,1676,2525,1697,2525,1711,2522,1733,2507,1734,2499,1724,2495,1699,2490,1667,2483,1623,2477,1597,2476,1606,2479,1633,2481,1687,2481,1714,2471,1719,2458,1717,2455,1695,2448,1655,2443,1598,2440,1593,2442,1623,2442,1664,2440,1679,2428,1684" ],
	'lower' : [ "541,1258,531,1281,525,1309,519,1343,513,1382,504,1428,495,1471,492,1526,491,1568,492,1626,498,1690,504,1728,516,1782,534,1858,548,1907,555,1927,555,1941,560,2004,564,2047,566,2090,561,2135,555,2191,556,2246,567,2298,581,2353,603,2427,621,2497,633,2555,637,2602,635,2620,642,2642,643,2660,624,2695,611,2718,607,2733,608,2746,620,2763,638,2769,667,2771,686,2771,720,2774,737,2769,753,2749,751,2721,742,2703,743,2652,743,2601,725,2554,717,2485,713,2444,721,2392,724,2322,726,2261,725,2215,709,2116,715,2081,721,2025,728,1951,725,1875,725,1817,733,1747,738,1712,738,1672,737,1631,731,1577,720,1548,652,1432,630,1385,590,1326", "897,1344,884,1358,860,1383,829,1436,800,1483,782,1513,755,1536,746,1554,745,1559,742,1587,738,1632,738,1675,742,1741,751,1796,758,1862,760,1922,759,1978,770,2062,779,2101,782,2121,784,2144,776,2168,770,2226,769,2295,773,2341,779,2391,782,2422,786,2473,787,2504,787,2530,777,2575,767,2607,769,2638,765,2669,767,2695,769,2708,766,2734,773,2749,785,2762,803,2763,810,2768,827,2768,841,2768,866,2767,913,2760,908,2748,907,2724,895,2713,872,2683,869,2657,872,2616,876,2557,883,2513,896,2442,911,2386,936,2261,934,2175,922,2103,925,2024,934,1952,961,1837,980,1705,988,1631,986,1554,967,1423,961,1356,951,1281", "1425,1293,1412,1307,1387,1327,1370,1353,1361,1374,1356,1367,1359,1329,1353,1324,1343,1331,1332,1369,1320,1410,1317,1478,1320,1513,1335,1558,1351,1590,1358,1618,1356,1699,1349,1793,1353,1859,1358,1920,1360,1982,1353,2025,1325,2105,1296,2191,1283,2241,1282,2283,1293,2337,1304,2406,1308,2483,1309,2524,1308,2598,1295,2647,1289,2673,1282,2703,1287,2736,1292,2747,1310,2756,1332,2758,1355,2755,1393,2757,1417,2753,1440,2754,1475,2758,1531,2770,1579,2772,1593,2760,1612,2776,1624,2768,1635,2763,1647,2759,1668,2762,1678,2750,1679,2739,1673,2719,1658,2716,1657,2707,1638,2703,1617,2694,1580,2687,1552,2678,1500,2652,1481,2634,1458,2610,1461,2561,1461,2528,1473,2471,1484,2402,1501,2300,1513,2218,1523,2162,1538,2116,1562,2082,1578,2037,1590,1995,1592,1967,1598,1949,1620,1918,1639,1854,1653,1816,1671,1727,1678,1669,1679,1615,1678,1554,1680,1489,1674,1400,1674,1347,1669,1318,1644,1296,1591,1270,1542,1269,1542,1289,1546,1343,1554,1419,1550,1447,1553,1461,1556,1470,1575,1485,1589,1498,1606,1540,1639,1579,1649,1600,1640,1609,1620,1612,1594,1578,1575,1561,1581,1586,1573,1602,1577,1613,1596,1660,1598,1682,1601,1693,1606,1712,1599,1735,1591,1737,1585,1757,1573,1763,1562,1749,1556,1724,1543,1672,1530,1628,1482,1478", "2223,1365,2194,1352,2155,1330,2124,1314,2083,1296,2063,1284,2046,1280,2039,1312,2037,1371,2032,1413,2024,1464,2017,1514,2011,1578,2011,1654,2017,1727,2030,1799,2040,1847,2054,1906,2060,1929,2066,1968,2071,2001,2074,2042,2074,2085,2076,2122,2073,2143,2068,2186,2062,2239,2063,2264,2071,2346,2082,2393,2096,2446,2112,2505,2121,2552,2129,2612,2131,2644,2129,2669,2133,2687,2124,2702,2102,2713,2093,2723,2089,2730,2087,2741,2091,2752,2104,2767,2121,2763,2134,2764,2147,2778,2168,2781,2213,2785,2229,2780,2235,2755,2235,2717,2238,2642,2227,2625,2223,2601,2218,2573,2212,2534,2220,2498,2225,2431,2228,2383,2232,2337,2236,2291,2227,2224,2218,2156,2221,2118,2230,2072,2239,2021,2241,1960,2240,1861,2246,1804,2253,1750,2259,1702,2259,1650,2255,1603,2249,1572,2264,1558,2273,1551,2279,1563,2269,1569,2264,1599,2261,1633,2261,1685,2261,1727,2267,1769,2273,1825,2273,1869,2271,1914,2272,1945,2272,1982,2278,2021,2281,2063,2286,2089,2292,2111,2296,2141,2288,2192,2279,2245,2275,2296,2279,2365,2285,2429,2287,2487,2279,2563,2268,2600,2262,2625,2263,2644,2262,2659,2257,2677,2257,2687,2256,2699,2252,2706,2246,2715,2246,2731,2248,2744,2257,2750,2267,2762,2283,2769,2304,2769,2322,2769,2338,2767,2359,2756,2380,2756,2393,2738,2393,2726,2379,2714,2368,2699,2358,2677,2367,2660,2369,2623,2374,2575,2389,2505,2404,2449,2428,2363,2442,2295,2450,2229,2441,2131,2437,2048,2444,1954,2453,1888,2477,1806,2501,1671,2503,1602,2499,1536,2487,1509,2481,1472,2484,1442,2485,1406,2478,1370,2476,1330,2471,1293,2461,1271,2450,1258,2427,1282,2368,1317,2318,1361,2299,1362,2273,1363,2237,1364" ],
	'upper' : [ "713,218,684,235,654,266,643,291,640,326,643,365,636,361,629,360,625,373,627,389,632,413,640,436,648,448,657,451,654,471,662,487,675,515,674,545,661,562,621,587,585,608,546,626,487,649,453,676,441,691,423,729,415,770,414,815,417,850,420,878,413,917,406,961,396,1021,387,1054,373,1101,369,1138,367,1186,367,1252,368,1303,360,1358,355,1404,351,1439,326,1459,301,1493,287,1527,269,1547,251,1560,249,1568,258,1581,282,1579,300,1567,312,1558,303,1573,297,1603,293,1648,289,1688,297,1705,315,1702,321,1669,332,1621,338,1588,340,1601,330,1641,330,1665,327,1682,327,1722,341,1733,354,1726,359,1686,364,1655,370,1607,374,1602,373,1648,368,1688,373,1713,383,1718,396,1708,400,1665,402,1626,410,1596,411,1622,408,1646,409,1671,418,1683,428,1678,437,1633,440,1588,448,1528,443,1487,439,1449,449,1404,467,1327,488,1270,510,1199,514,1146,520,1087,529,1039,537,1016,543,1046,555,1093,555,1151,545,1196,541,1226,541,1252,553,1276,567,1298,590,1334,617,1376,637,1403,666,1469,694,1519,718,1545,740,1554,758,1548,774,1514,802,1485,828,1449,843,1415,863,1387,898,1345,923,1317,952,1277,952,1238,950,1191,946,1129,954,1081,959,1042,966,1033,972,1067,976,1107,975,1169,983,1237,994,1283,1013,1358,1029,1429,1031,1481,1023,1538,1024,1595,1029,1632,1031,1666,1035,1694,1044,1700,1055,1697,1056,1647,1056,1610,1063,1655,1065,1693,1068,1725,1084,1737,1094,1721,1092,1683,1093,1650,1093,1618,1098,1638,1102,1679,1104,1713,1109,1742,1121,1754,1135,1747,1135,1708,1130,1655,1126,1609,1131,1624,1142,1678,1148,1716,1164,1724,1175,1714,1172,1674,1168,1632,1164,1591,1171,1585,1192,1600,1214,1602,1222,1585,1203,1573,1183,1552,1176,1531,1138,1474,1119,1456,1120,1433,1116,1388,1113,1333,1117,1287,1122,1214,1122,1134,1115,1085,1098,985,1086,912,1088,875,1099,839,1097,777,1087,730,1051,679,993,646,946,624,899,593,853,555,851,516,851,461,856,443,875,445,884,424,894,388,894,365,881,361,871,364,873,349,873,314,870,289,854,256,821,227,772,209,738,208", "1609,239,1567,218,1494,206,1442,218,1392,254,1367,296,1358,343,1363,386,1369,407,1375,445,1367,507,1347,559,1310,615,1277,657,1259,720,1248,771,1249,796,1259,843,1265,866,1266,897,1272,948,1286,1011,1295,1054,1299,1116,1302,1130,1308,1182,1315,1218,1328,1282,1344,1332,1351,1341,1357,1359,1368,1355,1377,1339,1400,1312,1423,1298,1430,1323,1449,1377,1468,1445,1475,1464,1493,1518,1521,1591,1534,1643,1549,1694,1560,1732,1571,1750,1566,1752,1576,1767,1589,1761,1585,1729,1581,1720,1590,1735,1600,1734,1608,1713,1601,1692,1596,1657,1580,1624,1578,1606,1582,1582,1580,1559,1593,1577,1618,1606,1629,1613,1647,1605,1654,1595,1643,1576,1627,1564,1611,1529,1598,1509,1583,1488,1552,1467,1549,1418,1544,1342,1542,1269,1553,1266,1612,1278,1661,1307,1668,1338,1671,1359,1669,1379,1677,1369,1684,1318,1688,1258,1683,1122,1670,969,1666,939,1662,904,1662,884,1668,862,1660,810,1638,765,1615,732,1583,694,1564,671,1545,646,1523,618,1521,604,1528,564,1543,557,1558,557,1577,563,1607,562,1615,551,1621,527,1629,510,1634,503,1642,494,1646,476,1662,472,1672,458,1660,424,1648,398,1660,387,1664,367,1664,331,1656,291,1638,263", "2245,204,2216,206,2165,230,2135,260,2123,289,2121,322,2121,362,2114,355,2102,365,2101,393,2111,427,2125,448,2138,444,2144,463,2146,522,2146,550,2139,570,2108,594,2059,626,2007,652,1955,680,1917,723,1902,769,1895,806,1900,857,1906,876,1909,914,1902,965,1895,1032,1886,1089,1877,1126,1871,1171,1872,1207,1877,1281,1880,1316,1882,1382,1876,1437,1874,1463,1854,1482,1825,1519,1803,1555,1794,1568,1776,1578,1773,1584,1779,1594,1796,1596,1813,1593,1821,1583,1834,1572,1832,1608,1827,1649,1824,1693,1823,1719,1832,1722,1846,1723,1852,1704,1856,1684,1862,1647,1870,1613,1871,1625,1865,1652,1864,1707,1862,1739,1868,1753,1881,1750,1888,1745,1895,1710,1895,1671,1903,1620,1906,1629,1905,1669,1903,1702,1903,1721,1912,1734,1922,1732,1929,1719,1933,1688,1934,1640,1938,1610,1941,1608,1943,1622,1941,1645,1941,1675,1944,1694,1954,1699,1961,1694,1968,1646,1974,1590,1973,1540,1969,1499,1962,1483,1970,1422,1981,1364,1997,1307,2008,1270,2018,1201,2021,1134,2025,1096,2034,1043,2038,1054,2046,1100,2053,1151,2045,1200,2044,1236,2046,1269,2048,1275,2068,1276,2085,1289,2098,1293,2118,1299,2139,1308,2163,1326,2191,1334,2198,1341,2214,1349,2226,1364,2240,1378,2251,1387,2273,1389,2293,1382,2311,1356,2331,1331,2368,1309,2401,1284,2440,1263,2452,1255,2454,1232,2454,1200,2441,1151,2441,1116,2447,1080,2450,1049,2459,1032,2462,1023,2472,1051,2485,1106,2484,1157,2490,1193,2503,1254,2519,1297,2529,1328,2547,1390,2557,1437,2561,1468,2554,1502,2552,1529,2552,1562,2560,1613,2566,1655,2570,1680,2580,1687,2588,1677,2589,1653,2587,1617,2588,1597,2595,1626,2596,1673,2605,1716,2619,1720,2628,1713,2628,1686,2624,1638,2623,1598,2631,1614,2638,1664,2640,1693,2648,1726,2653,1736,2669,1730,2672,1714,2668,1659,2665,1623,2663,1591,2671,1636,2678,1673,2686,1702,2702,1703,2707,1686,2708,1666,2704,1621,2698,1561,2709,1570,2744,1572,2748,1558,2732,1546,2713,1531,2703,1511,2691,1487,2665,1460,2651,1444,2646,1411,2634,1344,2633,1278,2636,1211,2635,1134,2622,1083,2601,994,2587,905,2582,861,2590,814,2588,767,2576,737,2561,695,2531,669,2501,651,2468,639,2410,614,2346,576,2322,539,2323,510,2333,487,2338,457,2346,447,2360,428,2370,393,2374,370,2350,361,2354,346,2354,300,2341,260,2296,219" ]
},
femaleAreas = {
	'ankle-n-foot' : [ "897,2764,871,2765,838,2766,797,2760,785,2761,787,2745,792,2727,795,2714,802,2701,810,2685,818,2658,812,2631,811,2609,812,2586,811,2573,828,2567,860,2557,888,2545,892,2564,902,2602,905,2618,903,2633,905,2670,905,2687,906,2721,907,2745", "930,2773,918,2765,916,2752,910,2734,914,2722,919,2698,915,2679,919,2662,924,2639,920,2612,930,2582,933,2545,945,2550,986,2567,1016,2577,1013,2599,1014,2626,1011,2651,1008,2665,1021,2703,1031,2739,1035,2758,1028,2764,963,2768,947,2766", "2083,2752,2067,2767,2041,2768,2013,2764,2001,2763,1986,2762,1968,2760,1962,2747,1969,2740,1978,2731,1988,2708,1993,2688,1992,2674,1989,2651,1989,2628,1988,2592,1975,2519,1967,2484,1975,2491,1988,2512,1991,2530,2009,2575,2022,2598,2044,2592,2045,2574,2044,2552,2045,2524,2054,2492,2061,2450,2069,2415,2071,2406,2072,2446,2070,2488,2069,2523,2067,2565,2076,2598,2084,2634,2082,2661,2087,2690,2090,2738", "2095,2753,2103,2761,2125,2770,2157,2773,2185,2767,2202,2766,2214,2761,2218,2748,2214,2739,2214,2732,2208,2726,2200,2707,2194,2692,2193,2669,2197,2650,2195,2623,2196,2590,2205,2548,2212,2506,2209,2498,2195,2524,2170,2582,2165,2607,2156,2611,2143,2602,2141,2592,2142,2560,2137,2516,2132,2469,2119,2430,2114,2419,2109,2424,2111,2452,2115,2502,2116,2559,2105,2614,2098,2638,2101,2661,2094,2724,2092,2739" ],
	'elbows-n-arms' : [ "631,1398,609,1396,579,1393,566,1393,559,1396,562,1381,563,1359,563,1312,561,1246,561,1176,564,1140,571,1103,580,1049,587,1016,596,948,609,873,620,818,643,781,677,736,698,696,712,748,702,801,692,828,691,877,703,906,708,922,687,1013,678,1089,676,1162,651,1291", "1178,1398,1217,1395,1236,1402,1234,1315,1229,1210,1219,1145,1203,1087,1197,1059,1191,995,1186,933,1178,868,1167,822,1150,791,1130,756,1092,714,1082,736,1082,772,1086,791,1096,812,1103,845,1101,870,1095,889,1097,908,1088,951,1088,966,1096,1013,1095,1071,1100,1117,1112,1188,1151,1302", "1823,1406,1791,1406,1763,1407,1765,1375,1765,1333,1768,1257,1775,1186,1786,1132,1795,1093,1807,1041,1812,963,1820,897,1825,837,1824,821,1843,805,1859,781,1863,745,1870,720,1881,707,1887,731,1896,761,1916,802,1928,837,1925,874,1926,907,1907,1010,1907,1059,1903,1109,1895,1164,1852,1307,1838,1349", "2378,1407,2410,1413,2450,1402,2444,1360,2445,1281,2443,1145,2431,1075,2420,1034,2401,905,2393,841,2374,809,2356,779,2349,768,2344,743,2328,704,2323,715,2322,738,2309,766,2287,823,2288,871,2301,926,2319,1023,2324,1086,2325,1143,2336,1220" ],
	'head' : [ "919,537,891,538,870,532,851,520,823,492,810,468,804,451,801,435,794,438,782,424,770,392,768,372,771,353,785,353,790,364,790,354,789,337,790,299,798,267,815,236,846,217,888,208,932,213,969,231,992,260,1002,285,1006,322,1005,364,1016,357,1023,362,1019,388,1016,407,1006,434,995,440,993,453,984,473,972,497,950,521", "2187,481,2167,457,2146,447,2115,441,2078,445,2047,472,2036,498,2025,490,2012,458,2008,440,1996,429,1982,389,1980,359,1991,357,1998,366,1998,353,1997,324,1998,297,2012,255,2036,224,2076,209,2122,207,2170,223,2200,258,2213,297,2214,338,2215,358,2226,352,2232,360,2236,379,2234,397,2218,432,2207,436,2197,445,2185,456,2183,467" ],
	'hips-n-lower-back' : [ "674,1591,665,1563,664,1532,663,1483,670,1421,680,1367,688,1318,703,1264,707,1254,713,1264,722,1278,718,1287,719,1312,719,1349,721,1374,712,1407,703,1437,694,1460,687,1504", "1131,1707,1129,1692,1132,1669,1134,1643,1137,1620,1139,1592,1141,1553,1135,1509,1113,1447,1099,1392,1091,1369,1094,1348,1095,1279,1103,1265,1117,1246,1121,1241,1132,1271,1135,1305,1145,1348,1152,1378,1161,1436,1165,1506,1158,1581", "1874,1734,1864,1702,1860,1672,1850,1631,1842,1593,1838,1550,1835,1496,1839,1451,1847,1398,1856,1347,1867,1289,1880,1248,1889,1216,1899,1197,1920,1213,1957,1238,2066,1318,2104,1321,2117,1311,2232,1235,2257,1220,2289,1220,2296,1240,2305,1271,2317,1325,2324,1365,2332,1413,2340,1475,2339,1572,2328,1633,2313,1698,2309,1733,2300,1774,2296,1800,2289,1832,2285,1856,2278,1912,2268,1953,2262,1990,2256,2020,2252,2038,2246,2028,2249,2008,2252,1977,2250,1969,2254,1952,2261,1913,2273,1853,2283,1792,2291,1740,2305,1665,2313,1560,2308,1528,2300,1553,2291,1583,2275,1627,2270,1654,2265,1677,2261,1670,2260,1641,2252,1613,2237,1589,2193,1582,2139,1575,2108,1549,2090,1524,2084,1517,2073,1526,2058,1542,2039,1559,2011,1570,1990,1573,1956,1575,1931,1580,1918,1592,1908,1626,1907,1649,1906,1664,1901,1666,1900,1650,1896,1628,1885,1591,1873,1548,1859,1521,1858,1504,1857,1538,1857,1577" ],
	'knee-n-legs' : [ "813,2583,807,2557,789,2464,772,2396,763,2346,754,2264,747,2162,749,2122,755,2083,755,2053,748,2004,730,1918,692,1694,664,1552,662,1535,669,1521,682,1484,689,1458,710,1402,718,1356,717,1294,727,1278,752,1290,763,1298,778,1323,814,1388,852,1453,887,1503,920,1510,904,1527,907,1563,896,1724,894,1749,896,1809,900,1870,901,1949,900,2030,891,2093,896,2150,907,2208,910,2252,903,2327,897,2407,892,2461,890,2522,889,2554,839,2570,823,2576", "936,2552,968,2568,1014,2583,1017,2559,1027,2517,1036,2466,1059,2382,1071,2307,1083,2197,1087,2137,1083,2098,1080,2079,1083,2023,1090,1979,1126,1759,1150,1625,1154,1605,1152,1568,1146,1530,1139,1492,1127,1454,1111,1408,1102,1374,1101,1354,1105,1318,1111,1287,1106,1270,1097,1264,1065,1279,1054,1292,1042,1303,996,1383,947,1487,937,1508,934,1540,930,1580,932,1616,936,1658,939,1713,937,1822,932,1880,931,1977,931,2036,937,2067,940,2103,935,2143,926,2201,921,2249,927,2331,932,2401", "2052,2617,2023,2629,2017,2618,2009,2583,2001,2551,1982,2511,1970,2477,1958,2432,1941,2379,1930,2327,1917,2186,1917,2147,1921,2115,1923,2089,1924,2070,1919,2035,1909,1970,1890,1849,1869,1727,1855,1649,1856,1632,1855,1595,1852,1558,1853,1531,1855,1509,1861,1505,1879,1551,1890,1576,1904,1644,1906,1617,1904,1601,1911,1589,1919,1577,1935,1566,1990,1567,2036,1557,2068,1531,2072,1564,2073,1621,2069,1648,2064,1683,2065,1814,2072,1890,2072,2021,2067,2075,2064,2111,2066,2148,2075,2191,2082,2245,2074,2403,2067,2440,2057,2490,2051,2548", "2163,2628,2135,2616,2132,2607,2134,2565,2127,2503,2113,2446,2109,2425,2105,2387,2103,2359,2096,2288,2096,2251,2100,2225,2104,2197,2114,2132,2114,2096,2108,2060,2104,2034,2102,1992,2102,1955,2102,1906,2106,1849,2109,1785,2110,1713,2102,1643,2097,1597,2098,1557,2103,1540,2118,1548,2147,1569,2221,1576,2248,1589,2260,1614,2264,1645,2268,1626,2275,1603,2286,1568,2307,1518,2314,1535,2316,1585,2262,1955,2253,2034,2247,2096,2257,2144,2258,2191,2253,2274,2245,2361,2230,2433,2210,2497,2192,2535,2178,2566" ],
	'wrist-n-hand' : [ "501,1584,499,1570,500,1557,495,1546,501,1524,506,1497,521,1466,545,1433,557,1415,562,1386,613,1388,633,1391,628,1432,635,1488,637,1549,637,1621,631,1637,616,1627,613,1588,611,1554,610,1583,610,1637,604,1659,592,1658,583,1623,582,1603,582,1632,580,1665,572,1675,562,1670,554,1606,553,1566,543,1606,538,1639,531,1655,521,1654,515,1636,516,1591,516,1580", "1189,1664,1200,1659,1212,1655,1240,1640,1260,1606,1274,1539,1278,1527,1243,1440,1236,1395,1209,1389,1175,1392,1180,1436,1183,1501,1190,1522,1191,1539,1189,1569,1191,1588,1202,1598,1208,1599,1207,1620,1197,1635,1184,1646", "1765,1399,1822,1399,1821,1427,1819,1461,1819,1495,1807,1526,1809,1560,1808,1585,1793,1598,1786,1596,1787,1607,1795,1628,1791,1640,1805,1639,1817,1658,1810,1671,1796,1663,1787,1667,1774,1650,1753,1640,1732,1588,1723,1539,1757,1438", "2377,1401,2414,1408,2445,1397,2451,1413,2461,1439,2492,1479,2511,1544,2508,1563,2510,1586,2493,1586,2491,1646,2491,1646,2477,1662,2466,1652,2462,1612,2457,1574,2454,1585,2449,1635,2447,1668,2435,1683,2422,1672,2422,1620,2418,1649,2407,1669,2396,1664,2395,1609,2396,1566,2393,1593,2390,1627,2381,1646,2370,1641,2366,1551" ],
	'neck' : [ "664,605,698,608,736,624,794,643,846,641,872,653,891,670,908,670,920,657,933,647,956,639,1034,629,1088,608,1112,597,1083,596,1040,585,988,562,971,539,971,500,950,509,930,526,892,532,871,525,844,509,814,477,820,534,809,569,783,583,739,594,688,596", "2069,441,2136,432,2172,436,2192,477,2188,509,2187,549,2208,583,2247,597,2309,599,2348,607,2347,621,2329,636,2249,678,2238,679,2110,728,1970,679,1853,618,1870,604,1895,597,1928,598,1975,590,2017,571,2033,547,2032,515,2026,489,2043,461" ],
	'mid-upper-back' : [ "1961,1258,1920,1229,1892,1216,1905,1183,1919,1151,1923,1111,1919,1032,1914,974,1918,937,1920,852,1920,825,1889,746,1880,698,1892,694,1912,684,1941,678,1972,678,2235,670,2254,671,2260,681,2293,687,2327,694,2329,710,2323,744,2313,779,2305,806,2293,838,2293,858,2295,882,2300,914,2291,969,2265,1105,2261,1155,2273,1184,2295,1239,2281,1236,2272,1231,2248,1239,2223,1254,2206,1244,2188,1222,2176,1184,2145,1095,2102,1048,2091,1048,2077,1058,2064,1064,2047,1077,2035,1108,2000,1197,1987,1227" ],
	'shoulders' : [ "612,865,612,820,613,734,616,690,616,675,624,644,660,604,689,595,729,599,785,622,858,629,879,641,861,657,847,655,831,647,807,649,782,655,743,664,700,664,696,688,702,713,683,741,631,807", "915,651,922,631,947,625,990,624,1047,611,1099,592,1137,602,1175,650,1180,676,1181,783,1178,871,1175,891,1169,869,1163,835,1146,802,1125,773,1096,736,1092,718,1088,704,1090,667,1081,661,1014,653,991,646,956,648,933,656", "1824,843,1821,792,1820,739,1821,681,1827,651,1866,602,1912,639,1976,672,1962,684,1944,677,1927,686,1907,696,1886,701,1868,757,1860,787", "2231,676,2258,659,2312,632,2347,608,2378,633,2393,686,2397,841,2391,846,2361,802,2345,770,2329,718,2322,703,2250,685" ],
	'lower' : [ "544,1267,538,1283,530,1322,519,1373,510,1437,504,1507,506,1539,510,1577,517,1625,525,1662,540,1744,558,1834,571,1911,576,1949,584,1979,593,2019,594,2045,598,2073,591,2120,590,2161,591,2198,595,2240,596,2284,602,2336,613,2398,630,2465,642,2525,649,2555,652,2603,652,2629,654,2646,657,2654,649,2682,641,2710,629,2742,626,2756,634,2761,653,2762,691,2762,726,2763,739,2759,744,2753,749,2731,748,2678,741,2638,744,2612,739,2593,731,2546,729,2501,736,2411,743,2315,748,2258,747,2216,736,2158,730,2111,731,2074,739,2030,741,1964,740,1895,734,1785,733,1717,739,1638,745,1576,743,1539,740,1525,753,1511,738,1505,726,1499,708,1482,689,1448,658,1399,639,1355,600,1302,587,1310", "869,2764,849,2764,815,2765,787,2769,763,2764,752,2743,752,2725,758,2703,756,2679,759,2660,765,2633,760,2611,768,2586,776,2526,773,2437,767,2319,762,2252,764,2209,772,2166,777,2133,780,2095,777,2057,771,2010,770,1956,770,1898,778,1781,779,1700,772,1619,770,1579,773,1540,778,1518,767,1506,779,1496,793,1481,813,1428,845,1369,874,1317,892,1296,903,1304,917,1290,955,1258,965,1255,974,1293,991,1391,1005,1497,993,1613,969,1727,945,1865,923,1997,918,2088,922,2132,921,2200,910,2316,895,2394,869,2490,851,2588,847,2663,862,2714,874,2755", "1448,1240,1427,1240,1400,1251,1371,1269,1361,1280,1346,1308,1329,1355,1321,1398,1320,1439,1326,1474,1340,1505,1357,1534,1375,1557,1387,1584,1393,1650,1397,1737,1408,1846,1425,1934,1436,2000,1428,2049,1420,2080,1389,2147,1375,2216,1371,2273,1375,2319,1387,2367,1398,2445,1408,2554,1402,2625,1390,2695,1389,2720,1399,2740,1415,2750,1445,2755,1470,2755,1509,2755,1563,2762,1614,2770,1646,2768,1666,2766,1692,2766,1715,2759,1738,2761,1751,2754,1768,2746,1757,2737,1729,2730,1712,2726,1685,2716,1652,2702,1614,2681,1566,2639,1547,2623,1530,2590,1520,2558,1522,2502,1528,2426,1531,2354,1542,2262,1550,2183,1566,2114,1594,2052,1605,1994,1610,1933,1621,1839,1636,1734,1644,1659,1649,1564,1654,1507,1644,1423,1638,1407,1637,1438,1635,1460,1635,1436,1628,1401,1623,1365,1620,1321,1610,1295,1581,1279,1546,1267,1539,1310,1540,1356,1536,1393,1540,1423,1548,1453,1551,1475,1562,1506,1563,1520,1569,1548,1579,1574,1577,1601,1563,1602,1556,1590,1547,1566,1538,1543,1530,1540,1518,1546,1522,1535,1511,1557,1513,1586,1518,1611,1527,1635,1541,1653,1544,1660,1543,1665,1542,1677,1541,1683,1537,1686,1525,1676,1510,1662,1494,1636,1482,1619,1472,1602,1463,1567,1458,1558,1463,1542,1466,1527,1471,1503,1482,1453", "2040,1231,2030,1252,2022,1290,2010,1347,1995,1429,1989,1482,1988,1536,1997,1597,2004,1636,2022,1723,2039,1825,2055,1926,2064,1977,2071,2032,2077,2088,2071,2135,2071,2197,2077,2276,2088,2354,2096,2395,2112,2462,2128,2527,2141,2599,2143,2644,2141,2661,2146,2682,2142,2697,2138,2713,2128,2735,2121,2739,2117,2751,2118,2760,2128,2764,2147,2757,2159,2761,2183,2766,2217,2764,2235,2754,2241,2742,2242,2699,2232,2665,2237,2638,2228,2609,2221,2575,2219,2536,2222,2471,2226,2394,2231,2296,2231,2220,2215,2107,2220,2057,2225,1997,2223,1890,2215,1742,2218,1658,2224,1582,2219,1536,2230,1514,2243,1525,2254,1541,2251,1569,2251,1615,2256,1655,2262,1707,2264,1785,2259,1857,2256,1924,2254,1986,2256,2031,2259,2061,2265,2089,2268,2128,2265,2152,2254,2211,2248,2257,2251,2309,2255,2351,2258,2380,2263,2445,2266,2504,2268,2529,2268,2577,2257,2623,2250,2641,2256,2668,2250,2691,2249,2706,2248,2720,2245,2733,2247,2749,2251,2758,2264,2760,2292,2767,2318,2764,2336,2757,2353,2764,2364,2761,2366,2747,2362,2736,2347,2710,2341,2678,2346,2662,2346,2636,2346,2598,2352,2561,2362,2514,2378,2437,2391,2385,2401,2312,2405,2235,2409,2149,2405,2111,2400,2062,2411,2004,2428,1903,2439,1834,2465,1698,2486,1595,2493,1516,2478,1384,2468,1325,2456,1273,2445,1243,2426,1241,2399,1249,2371,1269,2338,1286,2303,1305,2273,1330,2258,1351,2254,1337,2233,1338,2219,1338,2195,1321,2135,1280,2060,1237" ],
	'upper' : [ "694,218,676,227,655,243,642,263,633,291,628,328,628,348,629,362,622,358,614,355,609,372,611,392,618,413,629,435,636,437,642,431,649,471,657,504,661,535,653,567,624,585,581,596,535,598,512,600,494,609,468,642,459,669,456,694,453,735,452,791,452,852,439,935,430,1000,418,1064,405,1132,400,1197,401,1280,402,1356,400,1395,393,1417,369,1455,348,1491,337,1537,339,1560,339,1583,349,1585,359,1580,355,1621,359,1651,366,1656,376,1642,380,1605,388,1567,393,1560,396,1576,395,1612,398,1654,405,1673,415,1676,421,1654,422,1624,423,1601,424,1619,429,1650,440,1662,448,1652,449,1624,449,1583,451,1555,453,1573,455,1603,456,1626,469,1638,477,1622,477,1592,476,1557,474,1507,471,1458,470,1415,473,1373,486,1307,499,1255,514,1182,518,1118,522,1054,526,1013,535,962,545,922,549,943,559,986,567,1036,574,1082,584,1122,583,1156,573,1185,554,1221,546,1257,564,1280,579,1291,599,1303,632,1350,652,1394,682,1443,705,1482,723,1503,748,1513,768,1511,786,1503,799,1474,827,1418,857,1352,885,1306,906,1287,920,1283,953,1256,957,1237,945,1204,926,1162,917,1117,920,1072,924,998,932,946,933,992,935,1047,935,1082,943,1137,951,1182,970,1246,994,1318,1015,1389,1021,1462,1024,1501,1031,1530,1033,1553,1029,1575,1039,1595,1052,1600,1049,1608,1049,1626,1029,1643,1025,1657,1031,1664,1043,1657,1055,1652,1078,1639,1097,1615,1106,1581,1114,1534,1102,1497,1080,1427,1075,1394,1074,1316,1068,1223,1057,1149,1046,1093,1030,1017,1027,950,1015,831,1020,727,1013,657,994,619,975,610,938,597,868,585,822,567,810,544,809,505,824,476,834,438,847,431,855,405,861,368,857,357,842,365,843,347,846,316,835,271,824,248,786,219,730,208", "1412,220,1396,230,1379,253,1357,290,1355,315,1355,352,1357,382,1369,395,1390,428,1396,455,1394,483,1382,516,1357,559,1344,596,1330,646,1327,687,1338,764,1362,842,1390,902,1406,943,1415,998,1417,1080,1416,1111,1403,1173,1380,1239,1368,1268,1375,1264,1401,1244,1427,1229,1445,1227,1446,1237,1450,1270,1457,1312,1466,1361,1476,1419,1480,1440,1473,1498,1463,1537,1458,1555,1467,1576,1475,1602,1478,1618,1500,1654,1523,1677,1537,1689,1550,1688,1546,1668,1545,1655,1529,1633,1516,1600,1508,1566,1514,1549,1530,1535,1539,1550,1551,1584,1564,1603,1577,1597,1584,1578,1565,1535,1559,1490,1545,1445,1537,1410,1540,1362,1543,1306,1548,1273,1581,1282,1607,1298,1615,1314,1616,1347,1624,1389,1625,1409,1627,1420,1631,1456,1633,1471,1640,1468,1639,1438,1641,1402,1650,1359,1668,1238,1668,1159,1675,1084,1686,1016,1699,954,1701,913,1721,876,1723,841,1714,804,1677,758,1634,722,1598,689,1563,648,1554,628,1526,614,1513,590,1523,564,1542,540,1578,525,1622,526,1634,517,1636,494,1643,476,1643,467,1653,454,1654,432,1668,417,1649,388,1634,362,1639,343,1637,313,1630,283,1618,253,1587,229,1528,210,1471,202,1428,209", "2217,214,2191,227,2163,254,2153,282,2148,324,2149,349,2149,362,2141,359,2135,361,2136,388,2141,416,2152,436,2163,441,2166,462,2178,490,2185,506,2186,543,2172,569,2135,587,2079,600,2043,599,2016,606,2000,619,1978,661,1972,688,1971,747,1974,804,1976,852,1971,920,1961,990,1959,1048,1947,1093,1928,1179,1919,1258,1917,1350,1917,1407,1913,1433,1899,1473,1885,1512,1875,1538,1880,1560,1888,1602,1901,1633,1911,1643,1927,1647,1943,1664,1961,1666,1968,1660,1959,1645,1944,1634,1943,1616,1938,1594,1951,1595,1960,1575,1958,1539,1956,1524,1967,1499,1972,1427,1980,1387,1992,1338,2012,1285,2031,1224,2051,1133,2059,1079,2058,1027,2062,988,2067,988,2070,1026,2072,1072,2075,1106,2071,1149,2060,1181,2046,1215,2045,1223,2070,1233,2098,1249,2128,1270,2171,1302,2207,1328,2216,1341,2238,1348,2258,1342,2285,1313,2331,1277,2395,1245,2435,1231,2447,1238,2437,1218,2421,1179,2409,1157,2413,1114,2421,1087,2430,1017,2442,963,2451,918,2455,948,2464,990,2473,1036,2475,1079,2477,1120,2480,1169,2485,1215,2500,1275,2516,1337,2524,1390,2528,1428,2524,1469,2522,1514,2519,1540,2520,1565,2522,1604,2522,1626,2525,1644,2534,1647,2542,1633,2543,1606,2543,1580,2546,1563,2549,1581,2549,1605,2548,1634,2547,1648,2548,1658,2557,1672,2567,1662,2571,1640,2576,1616,2573,1656,2581,1681,2594,1680,2599,1661,2600,1622,2606,1590,2607,1574,2615,1600,2619,1638,2626,1662,2636,1660,2647,1640,2643,1590,2641,1561,2652,1586,2666,1585,2661,1543,2646,1486,2625,1457,2604,1432,2600,1395,2596,1343,2597,1273,2598,1207,2595,1146,2584,1082,2567,979,2552,900,2546,798,2545,738,2543,684,2538,659,2523,629,2501,610,2471,601,2432,601,2382,593,2346,572,2336,529,2343,482,2355,433,2365,430,2378,415,2385,382,2384,356,2368,354,2365,335,2360,288,2340,238,2302,219,2248,205" ]
};
function loadBodyAreas(areas, modal){
	var b = $(modal).find('.body');
	for(var i=0; i<b.length; i++)
		new bodyAreaTool(areas, modal, b[i]);
}

function bodyAreaTool(areas, modal, obj){
	console.log('here',areas==maleAreas);
	this.obj=obj;
	this.multiplier = $(obj).width() / 3000;
	this.g=(areas==maleAreas?'male':'female');
	this.t=public_url+'bodytool/'+this.g;
	this.prePartSrc = '';
	var a=obj.src.split('/'),si=a[a.length-1],ia=si.split(".");
	this.im=ia[0];
	this.ex="."+ia[1];
	this.areas=$.extend({},areas);
	this.f=[];

	this.select=function(part){
		this.obj.src = this.t + '/' +part+ this.ex;
		this.prePartSrc = this.obj.src;
		showInjuryList(part,$(this.obj).closest('.row'));
		$(this.obj).closest('.row').find('.movement-body-toggle').text(part=='lower'?"Upper Body":"Lower Body");
	};

	if(modal[0].id == 'movementModal'){
		this.areas={'lower': this.areas['lower'], 'upper': this.areas['upper']};
		this.select('lower');
	}
	else if(modal[0].id == 'goalModal'){
		if(this.g=='male'){
			this.areas['chest'] = ["816,920,773,919,735,907,704,877,687,822,675,795,669,767,668,779,657,786,644,795,634,801,634,789,643,775,661,738,679,713,718,686,793,654,804,651,840,652,874,658,893,657,912,659,916,673,928,678,935,661,948,657,971,656,1033,654,1073,674,1121,703,1167,743,1187,799,1183,809,1168,799,1163,783,1157,781,1159,789,1154,800,1153,810,1146,833,1133,858,1123,880,1096,905,1062,918,1021,925,989,915,975,914,955,904,946,894,872,894"];
			this.areas['core'] = ["903,1555,878,1550,851,1514,809,1436,769,1361,747,1336,713,1285,697,1260,702,1231,701,1205,709,1169,715,1108,703,1030,691,978,687,874,716,890,735,898,765,914,797,912,832,903,870,886,881,881,944,883,974,897,1014,913,1072,909,1095,899,1138,878,1137,903,1136,s937,1128,990,1112,1030,1118,1051,1110,1102,1106,1143,1111,1192,1112,1280,1079,1317,1038,1375,1010,1402,972,1472,946,1510"];
		}
		else{
			this.areas['chest'] = ["921,867,866,863,863,834,859,802,845,781,829,768,817,758,799,755,777,750,746,752,716,749,713,749,708,751,699,720,690,670,697,656,746,655,791,640,842,638,868,652,887,665,914,652,922,642,996,638,1056,660,1094,657,1094,715,1083,750,1081,759,1073,748,1038,752,1003,750,970,751,939,772,922,795,912,817,914,851"];
			this.areas['core'] = ["913,1513,885,1505,859,1476,819,1403,775,1324,751,1293,725,1263,716,1230,715,1219,731,1183,744,1151,734,1081,720,1003,702,920,701,905,724,928,759,952,783,945,794,929,823,910,842,891,865,861,881,857,904,859,917,861,938,880,982,920,1024,938,1052,942,1083,959,1089,975,1083,1023,1080,1069,1078,1109,1081,1141,1102,1194,1093,1248,1056,1294,1019,1358,989,1420,956,1485,941,1505"];
		}
		this.areas['lower'] = this.areas['upper'] = maleAreas['lower'] = maleAreas['upper'] = femaleAreas['lower'] = femaleAreas['upper'] = [];
	}
	else 
		this.areas['chest'] = this.areas['core'] = this.areas['lower'] = this.areas['upper'] = maleAreas['lower'] = maleAreas['upper'] = femaleAreas['lower'] = femaleAreas['upper'] = [];
	//maleAreas['chest'] = maleAreas['core'] = maleAreas['lower'] = femaleAreas['chest'] = femaleAreas['core'] = femaleAreas['upper'] = [];

	//this.obj.src = this.t + '/' + this.im + this.ex;
	this.map=document.createElement('map');
	this.map.id=this.map.name='Map'+(Math.round(Math.random()*100));
	this.obj.parentNode.appendChild(this.map);
	this.obj.useMap="#"+this.map.id;

	while (this.map.firstChild) {
		this.map.removeChild(this.map.firstChild);
	}
	var eo=this;
	for(var i in this.areas){
		if(areas[i]=="") continue;
		var c=new Image();
		c.src=this.t+'/'+i+this.ex;
		this.f.push(c);
		
		for(var j=0;j<this.areas[i].length;j++){
			var nvs = [], arr = this.areas[i][j].split(',');
			for(var k=0;k<arr.length;k++)
				nvs.push(Math.round(parseInt(arr[k])*this.multiplier));
			var a = document.createElement("area");
			a.shape = "poly";
			a.coords = nvs.join(',');
			a.setAttribute('part',i);
			a.onmouseover = function(){
				eo.obj.src = eo.t + '/' + this.getAttribute('part') + eo.ex;
			};
			a.onmouseout = function(){
				if(eo.prePartSrc)
					eo.obj.src = eo.prePartSrc;
				else
					eo.obj.src = eo.t + '/' + eo.im + eo.ex;
			};
			a.onclick = function(){
				var $div = $(this.offsetParent);
				
				if($div.hasClass('move-check')){
					var stepname = $div.closest('fieldset').data('stepname');
					if(radioBtnAction(mapArray[stepname], 'onlylower'))
						eo.select(this.getAttribute('part'));
				}	
				else
					eo.select(this.getAttribute('part'));
			};
			this.map.appendChild(a);
		}
	}

	$(eo.obj).closest('.row').find('.movement-body-toggle').unbind("click").click(function(){
		eo.select($(this).text().toLowerCase().indexOf("upper")>=0?'upper':'lower');
	});
}

function showInjuryList(part,p){
	p.find('.injuryList').addClass('hidden');
	p.find('.'+part).removeClass('hidden');
}
function toggleBmTimeFields($element){
	var selectedVal = $(".ui-selected", $element).text().trim(),
	form = $element.closest('form'),
	bmTimeManualFields = $(form).find('.bm_time_manual');
	$element.find('input').val(selectedVal);

	if(selectedVal == 'Manual Time Entry')
	{	
		//bmTimeManualFields.show(); 
		bmTimeManualFields.removeClass('hidden');
	}	
	else
		bmTimeManualFields.addClass('hidden');
		//bmTimeManualFields.hide();
	}
	function ratingHandler(){
		$('.rating, .rating-tooltip').each(function() {
			$(this).val() > 0 ? $(this).next(".label").show().text($(this).val() || ' ') : $(this).next(".label").hide();
		});
		$('.rating-tooltip').rating({
			start: 0,
			stop: 10,
			extendSymbol: function(rate) {
				$(this).tooltip({
					container: 'body',
					placement: 'bottom',
					title: 'Rate ' + rate
				});
			}
		});
		$('.rating, .rating-tooltip').on('change', function() {
			$(this).next('.label').show().text($(this).val());
		});
	}
	function medCondNotesModal(dd, clickedIndex){
		var modal = $('#medCondNotesModal');

		modal.find('input[name="entity"]').val(dd)
		modal.find('input[name="entityOptIdx"]').val(clickedIndex)
		modal.find('textarea').val('')
		modal.modal('show');
	}
	function fetchStepAndMarkComplete(stepNumb, completedOn, consultationDate, bookingDate){
		var step = $('ul#salesProcess a.todo-actions[data-step-number="'+stepNumb+'"]'),
		stepRow = step.parent();
console.log(stepNumb);
		markStepComplete(step, completedOn)
		if(stepNumb == 2){
			var prevSteps = stepRow.prevAll();
			prevSteps.each(function(){
				var $this = $(this);

				if(!isStepComplete($this))
					markStepComplete($this);
			})
		}
		if(typeof bookingDate != 'undefined' && bookingDate){
			var nextStep = stepRow.next();
			setStepDate(nextStep, bookingDate)
		}
		$('input[name="salesProcessCompleted"]').val(stepNumb)
	/*if(typeof consultationDate != 'undefined' && consultationDate){
		$('input[name="consultationDate"]').val(consultationDate)
	}*/
	/*var checkConsultation=false;
	if(typeof consultationDate == 'undefined' || consultationDate == null || consultationDate == ''){
		var value = '';
		checkConsultation=true;
	}
	else{
		var value = consultationDate;
		checkConsultation=true;
		//$('.consultation_date').text(dbDateToDateString(consultationDate));
	}*/
	if(typeof consultationDate != 'undefined'){
		/*$('[data-realtime="consultation"]').each(function(){ 
			var $elem = $(this),
				elemType = $elem.prop('nodeName');	
            if(elemType == 'INPUT' && consultationDate)
				$elem.val(consultationDate);
			else if(elemType == 'A' && $elem.hasClass('editFieldModal'))
				$elem.data('value', consultationDate);
			else{
				if(consultationDate != '' && consultationDate != null)
					$elem.text(dbDateToDateString(consultationDate));
				else
					$elem.text('');
			}
			
		});*/
		realTimeUpdate('consultation', consultationDate);
	}
	if(stepNumb >= /*9*/11){
		$('#clientStatusGroupUnderSalesProcess').removeClass('hidden')
		var fieldElem=$('select[name="clientStatusUnderSalesProcess"]');
		fieldElem.data('prevdata',fieldElem.val());
	}
}
function downgradeSteps(oldSaleProcessStep, clientNewSaleProcessStep, consultationDate){
	var step = $('ul#salesProcess a.todo-actions[data-step-number="'+oldSaleProcessStep+'"]'),
	prevSteps = step.parent().prevAll();

	markStepIncomplete(step)
	prevSteps.each(function(){
		var $this = $(this);

		if($this.find('a').data('step-number') != clientNewSaleProcessStep)
			markStepIncomplete($this);
		else
			return false;
	})
	$('input[name="salesProcessCompleted"]').val(clientNewSaleProcessStep)
	/*if(typeof consultationDate != 'undefined'){
		$('input[name="consultationDate"]').val(consultationDate);
	}

	if(typeof consultationDate == 'undefined' || consultationDate == null || consultationDate == ''){
		$('.consultation_date').text('');
	}
	else{
		$('.consultation_date').text(dbDateToDateString(consultationDate));
	}*/

	if(typeof consultationDate != 'undefined'){
		/*$('[data-realtime="consultation"]').each(function(){ 
			var $elem = $(this),
				elemType = $elem.prop('nodeName');	
            if(elemType == 'INPUT')
				$elem.val(consultationDate);
			else if(elemType == 'A' && $elem.hasClass('editFieldModal'))
				$elem.data('value', consultationDate);
			else{
				if(consultationDate != '' && consultationDate != null)
					$elem.text(dbDateToDateString(consultationDate));
				else
					$elem.text('');
			}
			
		});*/
		realTimeUpdate('consultation', consultationDate);
	}
	if(clientNewSaleProcessStep < /*9*/11)
		$('#clientStatusGroupUnderSalesProcess').addClass('hidden')
}
function markStepComplete(row, completedOn){
	row.find("i:not(.sales-pencile)").removeClass("fa-square-o").addClass("fa-check-square-o");
	row.find("span.desc").css({
		opacity: .25,
		textDecoration: 'line-through'
	});	
	if(typeof completedOn != 'undefined' && completedOn)
		//row.find("span.compl-date").text(completedOn);
	setStepDate(row, completedOn)
}
function markStepIncomplete(row){
	row.find("i:not(.sales-pencile)").removeClass("fa-check-square-o").addClass("fa-square-o");
	row.find("span.desc").css({
		opacity: 1,
		textDecoration: 'none'
	});	
	//row.find("span.compl-date").text('');	
	setStepDate(row, '')
}
function isStepComplete(row){
	return row.find("i").hasClass('fa-check-square-o');
}
function setStepDate(step, date){
	step.find("span.compl-date").text(date);
	if(date == '')
		step.find("span.editFieldModal").addClass('hidden');	
	else
		step.find("span.editFieldModal").removeClass('hidden');
}
function setStepsBooked(value){
	$('#salesProcess input[name="stepsBooked"]').val(value);
}



/* start: Toggle renewal period fields based on installment plan */
/*function toggleRenwPeriod(instllPlan){
	if(typeof instllPlan == 'undefined')
		instllPlan = $('#editMembSub select[name="instllPlan"]').val();

	var renwDateGroup = $('#renwDateGroup'),
		renwDayGroup = $('#renwDayGroup');

	if(instllPlan == 'every_month'){
		//Monthly Renewal
		renwDateGroup.show();
		renwDayGroup.hide();
	}
	else if(instllPlan == 'every_week'){
		//Weekly Renewal
		renwDateGroup.hide();
		renwDayGroup.show();
	}
	else if(!instllPlan || instllPlan == 'single_payment'){
		//No Renewal
		renwDateGroup.hide();
		renwDayGroup.hide();
	}
}*/
/* end: Toggle renewal period fields based on installment plan */

/* start: Calculate and set discount duration options */
/*function setMembdiscdurOpts(){
	var payPlanDd = $('#payPlan'),
		startDate = $('#membStartDate').val(),
		endDate = $('input[name="membEndDate"]').val(),
		discDurDd = $('#discDur'),
		discDur = discDurDd.val(),
		max = 0,
		options = '<option value="">-- Select --</option>';

	if(payPlanDd.val() && startDate && endDate){
		var payPlanOpt = payPlanDd.find('option:selected'),
			unit = payPlanOpt.data('unit'),
			amount = payPlanOpt.data('amount');

		max = Math.ceil((moment(endDate).diff(moment(startDate, 'ddd, D MMM YYYY'), unit))/amount);
	}

	for(var i=1; i<=max; i++){
		options+='<option value="'+i+'">'+i+'</option>';
	}
	discDurDd.html(options)

	if(discDur && !discDurDd.find('option[value="'+discDur+'"]').length)
		discDur = '';
	
	discDurDd.val(discDur).selectpicker('refresh');
}*/
/* start: Calculate and set discount duration options */

/* start: Calculate and set payment plan options */
/*function setMembPayPlanOpts(callback){
	var startDate = $('#membStartDate').val(),
		endDate = $('input[name="membEndDate"]').val(),
		payPlanDd = $('#payPlan'),
		payPlanOpts = payPlanDd.find('option[value!=""]');

	payPlanOpts.addClass('hidden');	
	if(startDate && endDate){
		var membershipOpt = $('#membership option:selected');
		if(hasData(membershipOpt, 'max-pay-plan')){
			var maxPayPlan = membershipOpt.data('max-pay-plan');
			payPlanOpts.filter('[value="'+maxPayPlan+'"]').prevAll().andSelf().removeClass('hidden');
		}
		else{
			var endDateMom = moment(endDate),
				startDateMom = moment(startDate, 'ddd, D MMM YYYY');
			payPlanOpts.each(function(){
				var option = $(this),
					unit = option.data('unit'),
					amount = option.data('amount');

				var diff = endDateMom.diff(startDateMom, unit);
				if(diff >= amount){
					option.removeClass('hidden');
					membershipOpt.data('max-pay-plan', option.val())
				}
			})
		}
	}
	var payPlan = payPlanDd.val();
	if(payPlan && payPlanOpts.filter('[value="'+payPlan+'"]').hasClass("hidden"))
		payPlanDd.val('')
	payPlanDd.selectpicker('refresh')
	payPlanDd.prev().find('a.hidden').parent().addClass('hidden')

	if(typeof callback != 'undefined')
		callback();
}*/
/* end: Calculate and set payment plan options */

function consultDateExpiredMsg(){
	swal({
		title: "Consultation date has expired.\n Do you still want to \n continue?",
		type: 'warning',
		allowEscapeKey: false,
		showConfirmButton: true,
		confirmButtonText: 'Yes',
		confirmButtonColor: '#ff4401',
		cancelButtonText: 'No',
		showCancelButton: true,
		allowOutsideClick: false
	},
	function(isConfirm) {
		if (isConfirm) 
			response =  true;
		else 
			response =  false;
	});

	return;
}

/* start: Check if depending step is complete */
function dependingStepComp(step/*depStep*/){
	var comp = true;
	if(hasData(step, 'booking-step')){
		var bookingStep = step.data('booking-step');
		/*if(typeof bookingStep == 'string'){
			if(bookingStep){
				bookingStep = bookingStep.split(',');
				$.each(bookingStep, function(idx, val){
					if(!dependingStepCompHelper(val)){
						comp = false;
						return false;
					}
				})
			}
		}
		else */if(bookingStep && !dependingStepCompHelper(bookingStep))
			comp = false;
	}

	if(comp){
		/*if(step == '18'){
			var stepDepend = stepDependPar.prevAll(':not(.hidden):first');
		}*/
		if(hasData(step, 'step-dependant')){
			var step = step.data('step-dependant');
			if(step && !dependingStepCompHelper(step))
				comp = false;
		}
	}
	return comp;
}
function dependingStepCompHelper(depStep){
	/*var stepDepend = $('ul#salesProcess').find('a[data-step-number="'+depStep+'"]'),
		stepDependPar = stepDepend.parent();
	if(stepDependPar.hasClass('hidden'))
		 var stepDepend = stepDependPar.prevAll(':not(.hidden):first');
	
		if(!isStepComplete(stepDepend))*/
			var stepToCheck = getDependantStep(depStep),
		step = $('ul#salesProcess').find('a[data-step-number="'+stepToCheck+'"]');

		if(!isStepComplete(step))
			return false;

		return true;
	}
	function getDependantStep(depStep){
		var stepDepend = $('ul#salesProcess').find('a[data-step-number="'+depStep+'"]'),
		stepDependPar = stepDepend.parent();
		if(stepDependPar.hasClass('hidden'))
			return getDependantStep(stepDepend.data('step-dependant'));
		return depStep;
	}
	/* end: Check if depending step is complete */

	/* start: Detect if membership is set to change */
/*function isMembChanged(){
	var membChanged = true;
	if(!isFieldUpdated($('#membership')) && !isFieldUpdated($('#payPlan'))){
		var applyDiscCb = $('#applyDisc');
		if(!isFieldUpdated(applyDiscCb)){
			if(applyDiscCb.is(':checked')){
				if(!isFieldUpdated($('#discAmt')) && !isFieldUpdated($('#discDur'))){
					membChanged = false;
				}
			}
			else
				membChanged = false;
		}
	}
	return membChanged;
}*/
/* end: Detect if membership is set to change */

/* end: Detect if field value has been changed */
/*function isFieldUpdated(field){
	var tag = field.prop('tagName').toLowerCase(),
		type = field.prop('type');

	if(tag == 'select' || (tag == 'input' && type == 'text')){
		if(field.val() == field.data('val'))
			return false;
	}
	else if(tag == 'input' && type == 'checkbox'){
		if(field.prop('checked') == field.data('checked'))
			return false;
	}
	return true;
}*/
/* end: Detect if field value has been changed */

/* Start: Contact step of Sales process */
function toggleContactNotesInSubview(mode){
	var notesField = $('.noteWrap'),
	notesList = $('.notes-list'),
	createBtn = $('.create-note'),
	listBtn = $('.show-note');

	if(mode == 'list'){
		notesField.hide();
		notesList.show();
		createBtn.show();
		listBtn.hide();
	}
	else if(mode == 'create'){
		notesField.show();
		notesList.hide();
		createBtn.hide();
		listBtn.show();
	}
}

function resetContactNoteForm(){
	var statusField = $('#contact_note select[name="contactStatus"]');
	setFieldNeutral(statusField)
	statusField.val('').selectpicker('refresh');

	var contactMadeOptField = $('#contact_note select[name="contactMadeOpt"]');
	setFieldNeutral(contactMadeOptField)
	contactMadeOptField.val('').selectpicker('refresh');
	contactMadeOptField.closest('.form-group').hide();

	var clientStatusField = $('#contact_note select[name="clientStatusInContactNotes"]');
	setFieldNeutral(clientStatusField)
	clientStatusField.val('').selectpicker('refresh');
	clientStatusField.closest('.form-group').hide();

	var cbDateField = $('#contact_note input[name="contactCbkDate"]');
	setFieldNeutral(cbDateField)
	cbDateField.val('');

	var cbTimeField = $('#contact_note input[name="contactMadeTime"]');
	setFieldNeutral(cbTimeField)

	$('#cbFields').hide();
}
/* End: Contact step of Sales process */

function prcoessStepBookedAlready(stepNumb){
	var stepsBooked = $('#salesProcess input[name="stepsBooked"]').val();
	if(stepsBooked){
		stepsBooked = JSON.parse(stepsBooked)
		if($.inArray(stepNumb, stepsBooked) >= 0){
			window.location.href = public_url+"dashboard/calendar-new";
			// e.stopImmediatePropagation();
			return false;
		}
	}
}

/*function setSalesSessionType(setType){
	if(typeof setType != 'undefined'){
		var selectableOpts = $("#salesSessionTypeSelectable li");
		selectableOpts.removeClass("ui-selected").show();
		selectableOpts.filter('[data-val="'+setType+'"]')[0].className += " ui-selected";
	}

	var bookType = $('#salesSessionTypeSelectable li.ui-selected').data('val')
	$('input[name="salesSessionType"]').val(bookType)

	if(bookType == 'team'){
		$('.team-checkbox-field').removeClass('hidden');
 		$('.indiv-checkbox-field').addClass('hidden');
 		$('#saleStep17').prop('checked', false)
	}
	else if(bookType == 'indiv'){
		$('.team-checkbox-field').addClass('hidden');
 		$('.indiv-checkbox-field').removeClass('hidden');
 		$('#saleStep11').prop('checked', false)
	}
}*/
function toggleSalesSession(cb){
	var fieldsetId = cb.val(),
	fieldset = $('#'+fieldsetId),
	orderFieldSet = $('#sessionOrder');

	if(cb.is(':checked')){
		fieldset.show();
		if($('#salesProcSettModal [name="saleStepSession[]"]').not(cb).is(':checked'))	
			orderFieldSet.show();
	}
	else{
		fieldset.hide()	
		orderFieldSet.hide();
	}
}

function updateSalesSessionOrder(type, amnt){
	var length = $('#sessionOrder li.'+type).length;
	if(!amnt)
		amnt = 0;
	else
		amnt = parseInt(amnt, 10)
	if(length < amnt){
		if(type == 'team')
			var stepName = 'Team';
		else if(type == 'indiv')
			var stepName = 'Individual';
		var li = '';
		for(i=length+1; i<=amnt; i++)
			li += '<li class="dd-item '+type+'" data-id="'+type+'-'+i+'"><div class="dd-handle">Book '+stepName+'</div></li>';

		$('#sessionOrder .dd-list').append(li);
	}
	else if(length > amnt){
		for(i=length; i>amnt; i--){
			$('#sessionOrder li[data-id="'+type+'-'+i+'"]').remove();
		}
	}

	UINestable.update($('#salesNestable').data('output', $('input[name="salesNestable"]')))
}

function ifPauseSalesProcess(){
	if($.inArray($('td[data-realtime="accStatus"]:first span').text(), ['Active Lead', 'Inactive Lead', 'Inactive', 'On Hold']) >= 0)
		return true;
	return false;
}

function clientStatusUnderSalesProcess(formData){
	$.post(public_url+'client/'+formData.entityId+'/update-field', formData, function(data){
		var data = JSON.parse(data);
		if(data.status == "updated"){
			location.reload(true);
			
			/*$this.data('prevdata',formData.accStatus);
			realTimeUpdate(formData.entityProperty, data.value);*/
			
				/*if('consultationDate' in data)
					$('.consultation_date').text(dbDateToDateString(data.consultationDate));
				else
					$('.consultation_date').text('');*/

			/*if('stepCompleted' in data){
				if(data.action == 'upgrade'){
					if('salesProcessDate' in data)
						var completedOn = data.salesProcessDate;
					else
						var completedOn = '';
					fetchStepAndMarkComplete(data.stepCompleted, completedOn);
				}
				else if(data.action == 'downgrade')
					downgradeSteps(data.oldSaleProcessStep, data.stepCompleted);
			}*/
		}
	});
}

function updateSalesStepAjax(formData,$this=""){
	var stepsArr = Array();
	$.each($('#salesProcess li'), function(){
		stepsArr.push($(this).find('a.todo-actions').data('step-number'));
	});
	var lastStep = Math.max.apply(Math,stepsArr);
	
	formData['clientId'] = $('#clientId').val();
	// if(formData.action == 'complete' && formData.stepNumb == lastStep && !('status' in formData)){
	// 	var emm = $('#editMembSub');
	// 	emm.find('input[name="stepNumb"]').val(lastStep);
	// 	$("#editMembSub").modal('show');
	// 	return false;
	// }
	// else{
		console.log(formData);

	$.post(public_url+'clients/sales-process/update', formData, function(data){
		var data = JSON.parse(data);
		console.log(data);
		if(data.status == "updated"){
			if($('input[name="salesProgress"]').val() != undefined && $('input[name="salesProgress"]').val() != ''){
			var salesProgress = JSON.parse($('input[name="salesProgress"]').val());
			if($this.hasClass('fa-square-o')){
				if('salesProcessDate' in data)
					var completedOn = data.salesProcessDate;
				else
					var completedOn = '';
					if('consultationDate' in data)
					var consultationDate = data.consultationDate;
				else
					var consultationDate = '';
				fetchStepAndMarkComplete( $this.closest('a').data('step-number'), completedOn, consultationDate);
				realTimeUpdate('accStatus', data.changeStatus);	
				$('.todo-actions .fa').each(function(){
				
					if($(this).hasClass('fa-square-o')){
						var data = $(this).closest('a').data('step-number');
						console.log(data,$.inArray( data, salesProgress) == -1);
						if($.inArray( data, salesProgress) == -1){ 
							var bookingNumber = $(this).closest('a').data('booking-step');
							var bookDate = $('a[data-step-number="'+data+'"]').find('.editFieldModal').data('value');
							var currentDate = new Date();
				
							if($.inArray( bookingNumber, salesProgress) != -1 && new Date(bookDate) < currentDate){ 
								
								$(this).trigger('click');
								return false;
							}
	                		 
						}						
					}
				});
				  
			}else{
				location.reload(true);
			}
			}else{
				location.reload(true);
			}
			
		

			
			// location.reload(true);
			/*var cs=data.changeStatus.split('|');
			if(cs[0] == 'active' && formData.action == 'complete'){
				var emm=$("#editMembSub");
				emm.on("hidden.bs.modal", function () {
					location.reload();
				});
				emm.modal('show');
			}
			else {
				location.reload(true);
			}*/
			/*if('changeStatus' in data){
				realTimeUpdate('accStatus', data.changeStatus);	
				setStepsBooked(data.stepsBooked);

				if('consultationDate' in data)
					var consultationDate = data.consultationDate;
				else
					var consultationDate = '';
				if('salesProcessDate' in data)
					var completedOn = data.salesProcessDate;
				else
					var completedOn = '';
				fetchStepAndMarkComplete(step.data('step-number'), completedOn, consultationDate)
			}*/
		}
	});
	// }
}

jQuery(document).ready(function(){
	$('#consultExpDate').datepicker({dateFormat:"D, d M yy"});
	var emailStep = $('ul#salesProcess').find('a[data-step-number="18"]');
	var stepDepend = emailStep.parent().prevAll(':not(.hidden):first').find('a').data('step-number');
	emailStep.data('step-dependant', stepDepend)
	
	ratingHandler();
	$('input[name="bm_time_day"]').datepicker({autoclose:true, dateFormat:"D, d M yy",minDate: new Date()});
	$('input[name="expirey_date"]').datepicker({autoclose:true, dateFormat:"D, d M yy",minDate: new Date()});

	$(".bm_time_selectable").selectable({
		stop: function() {
			toggleBmTimeFields($(this));
		}

	});

	initCustomValidator();

	toggleBmTimeFields($('.bm_time_selectable'));

	currentClientId = $('#currentClientId').val();

	$(document).on("change", "select.customValDdField", function(){
		if($(this).val() != null && $(this).val() != '')
			setFieldNeutral($(this))
	})

	initTelInput($(".cntryCode"));

	$(document).on("countrychange", ".cntryCode", function(){
		initTelInputOnChange($(this))
	}); 
	

	$('select[name="allergies"]').change(function(){
		toggleNotes(this);
	});
	toggleNotes($('select[name="allergies"]'));


	$('select[name="chronicMedication"]').change(function(){
		toggleNotes(this);
	});
	toggleNotes($('select[name="chronicMedication"]'));


	$('select[name="smoking"]').change(function(){
		toggleSmokeDays();
	});
	toggleSmokeDays();


	// $('#heightUnit').click(function(){
	// 	toggleMeasureDd('height', $(this));
	// });
	// toggleMeasureDd('height', $('#heightUnit'), true);


	// $('#weightUnit').click(function(){
	// 	toggleMeasureDd('weight', $(this));
	// });
	// toggleMeasureDd('weight', $('#weightUnit'), true);


	$('input[name="referralNetwork"]').change(function(){
		toggleReference($(this).val());
	});
	toggleReference();

	/* start: Edit Referred by modal */
	$('input[name="refereModalReferralNetwork"]').change(function(e){
		toggleReference($(this).val(), $("#referredByModal"));
	});

	$('#referredByModal').on('show.bs.modal', function(){
		var modal = $(this);
		var check = $('input[name="referralNetwork"]:checked').val();
		if(check=='Client')
			modal.find('#refereModalReferralNetwork0').prop('checked',true);
		else if(check=='Staff')
			modal.find('#refereModalReferralNetwork1').prop('checked',true);
		else if(check=='Professional network')
			modal.find('#refereModalReferralNetwork2').prop('checked',true);
		toggleReference(value, modal);

		var value = $('select#modalReferer option:selected').val();
		console.log(value);
		modal.find('select#modalReferer').val(value).selectpicker('refresh');
		isEpic($('select#modalReferer option:selected'));

	});
		/*$('#referredByModal').on('hide.bs.modal', function(){
			$('select[name="referrer"]').val("").selectpicker('refresh');
			setFieldNeutral($('select[name="referrer"]'));
			isEpic($('select[name="referrer"]'));
		});*/

		$('#referredByModal .submit').click(function(e){
			e.preventDefault();

			var formData = {},
			modal = $('#referredByModal');

			formData['entityProperty'] = 'referralNetwork';
			formData['entity'] = 'client';
			formData['entityId'] = currentClientId;
			formData['referralNetwork'] = $('input[name="refereModalReferralNetwork"]:checked').val();
			if(formData['referralNetwork'] == 'Client'){
				formData['referralId'] = modal.find('input[name="clientId"]').val();
				formData['referralName'] = modal.find('input[name="refereModalClientName"]').val();
			}
			else if(formData['referralNetwork'] == 'Staff'){
				formData['referralId'] = modal.find('input[name="staffId"]').val();
				formData['referralName'] = modal.find('input[name="refereModalStaffName"]').val();
			}
			else if(formData['referralNetwork'] == 'Professional network'){
				formData['referralId'] = modal.find('input[name="proId"]').val();
				formData['referralName'] = modal.find('input[name="refereModalProName"]').val();
			}
			else{
				formData['referralId'] = '';
				formData['referralName'] = '';
			}
			formData['referrer'] = modal.find('select[name="referrer"]').val();
			if(formData['referrer'] == "onlinesocial" || formData['referrer']== "mediapromotions"){
				formData['referencewhere']= modal.find('input[name="referencewhere"]').val();
				formData['otherName'] = '';
			}
			else if(formData['referrer'] == "socialmedia"){
				formData['otherName']= modal.find('input[name="otherName"]').val();
				formData['referencewhere'] = '';
			}
			else{
				formData['referencewhere'] = '';
				formData['otherName'] = '';
			}

			//console.log(formData);

			$.ajax({
				url: public_url+'client/'+currentClientId+'/update-field',
				method: "POST",
				data: formData,
				success: function(data){
					var data = JSON.parse(data);
					if(data.status == "updated"){
						modal.modal('hide');
						realTimeUpdate('referralNetwork', formData['referralNetwork']+'|'+formData['referralId']+'|'+formData['referralName']+'|'+formData['referrer']+'|'+formData['referencewhere']+'|'+formData['otherName']);
					}
				}
			})		
		})
		/* end: Edit Referred by modal */

		$('select.medCond').on('changed.bs.select', function(e, clickedIndex, newValue){
			var $this = $(this);

			if(clickedIndex == 0){
				$this.find('option:not([value="None"])').prop('selected', false);
				$this.closest('.form-group').find('input[type="hidden"]').val('')
				$this.parent().removeClass('open');
			}
			else{
				if(newValue)
					medCondNotesModal($this.attr('name'), clickedIndex)
				else{
					var allNotesField = $this.closest('.form-group').find('input[type="hidden"]'),
					allNotes = allNotesField.val(),
					opt = $this.find('option').eq(clickedIndex).attr('value');

					if(allNotes != ''){
						var formData = JSON.parse(allNotes);

						if(opt in formData){
							$(formData).removeProp(opt);
							allNotesField.val(JSON.stringify(formData))
						}
					}
				}

				$this.find('option[value="None"]').prop('selected', false)
			}

			$this.selectpicker('refresh')
		});
		$("#medCondNotesModal .submit").click(function(){
			var modal = $(this).closest('div.modal'),
			notes = modal.find('textarea').val();

			if(notes){
				var entity = modal.find('input[name="entity"]').val(),
				dd = $('select[name="'+entity+'"]'),
				allNotesField = dd.closest('.form-group').find('input[type="hidden"]'),
				allNotes = allNotesField.val(),
				entityOptIdx = modal.find('input[name="entityOptIdx"]').val(),
				opt = dd.find('option').eq(entityOptIdx).attr('value');

				if(allNotes == '')
					var formData = {};
				else
					var formData = JSON.parse(allNotes);
	          
				formData[opt] = notes;
				if(entity == 'medicalCondition'){
					$(".med_notes").empty();	
					$.each(formData,function(key, Obj){	
						var html = '<div class="form-group " data-med="'+key+'">\
						<label class="strong medinotes">'+key+' </label>\
						<input class="form-control" value="'+Obj+'" name="medicaNotes">\
						</div>';
						$('.med_notes').append(html);
					});
				}else if(entity == 'relMedicalCondition'){
					$('.rel_med_notes').empty();
					$.each(formData,function(key, Obj){	
						var html = '<div class="form-group " data-med="'+key+'">\
						<label class="strong relmedinotes">'+key+' </label>\
						<input class="form-control" value="'+Obj+'" name="relmedicaNotes">\
						</div>';
						$('.rel_med_notes').append(html);
					});
				}
				allNotesField.val(JSON.stringify(formData))
			}
		});

		var preferredDaysField = $('#step-2 input[name="preferredTraingDays"]');
		preferredDays = preferredDaysField.val();
		if(preferredDays){
			preferredDays = JSON.parse(preferredDays);
			if(Object.keys(preferredDays).length){
				var cbxs = preferredDaysField.closest('.form-group').find('input[type="checkbox"]');
				$.each(preferredDays, function(day, times){
					var cb = cbxs.filter('[data-day="'+day+'"]');
					$.each(times, function(key, time){
						cb.filter('[value="'+time+'"]').prop('checked', true)
					});
				});
			}
		}

		/****** Medical Notes Add Box *******/
		$('select[name="medicalCondition"]').change(function(){
			var allVal = $(this).val();
			$('.med_notes .form-group').each(function(){
				if($.inArray($(this).data('med'),allVal) < 0){
					$(this).remove();
				}
			})
		});

		$('select[name="relMedicalCondition"]').change(function(){
			var allVal = $(this).val();
			$('.rel_med_notes .form-group').each(function(){
				if($.inArray($(this).data('med'),allVal) < 0){
					$(this).remove();
				}
			})
		});

		$('input[name="medicaNotes"]').change(function(){
				$this = $(this);
				dd = $('select[name="medicalCondition"]'),
				allNotesField = dd.closest('.form-group').find('input[type="hidden"]'),
				allNotes = allNotesField.val();
				if(allNotes != undefined && allNotes != ''){
					var formData ={};
					data = JSON.parse(allNotes);
					$.each(data,function(key,obj){
						if(key == $this.closest('.form-group').data('med')){
							formData[key] = $this.val();
						}else{
							formData[key] = obj;
						}
					});
				}
				allNotesField.val(JSON.stringify(formData))
		})
		$('input[name="relmedicaNotes"]').change(function(){
			$this = $(this);
			dd = $('select[name="relMedicalCondition"]'),
			allNotesField = dd.closest('.form-group').find('input[type="hidden"]'),
			allNotes = allNotesField.val();
			if(allNotes != undefined && allNotes != ''){
				var formData ={};
				data = JSON.parse(allNotes);
				$.each(data,function(key,obj){
					if(key == $this.closest('.form-group').data('med')){
						formData[key] = $this.val();
					}else{
						formData[key] = obj;
					}
				});
			}
			allNotesField.val(JSON.stringify(formData))
		})
		/****** //Medical Notes Add Box *******/

		$("#step-2 input.preferredTraingDays").change(function(){
			var $this = $(this),
			preferredDaysField = $this.closest('.form-group').children('input[name="preferredTraingDays"]'),
			preferredDays = preferredDaysField.val(),
			day = $this.data('day');

			if(preferredDays == '')
				var formData = {};
			else
				var formData = JSON.parse(preferredDays);

			if($this.is(':checked')){
				if(day in formData){
					var preferredTime = formData[day];

					preferredTime.push($this.val());
					formData[day] = preferredTime;
				}
				else
					formData[day] = [$this.val()];
			}
			else{
				var preferredTime = formData[day];

				preferredTime.splice(preferredTime.indexOf($this.val()), 1);
				if(preferredTime.length){
					formData[day] = preferredTime;
				}
				else
					$(formData).removeProp(day);
			}

			preferredDaysField.val(JSON.stringify(formData))
		})

		$('#waiverModal button#submit').click(function(){
			var modal = $('#waiverModal');
			var date = modal.find('input[name="trainerwaiverDate"]');
			var dateVal = date.val();
			var terms = modal.find("input[name='waiverTerms']");
			var isFormValid = true;

			var formGroup = date.closest('.form-group');
			var helpBlock = formGroup.find("span.help-block");
			if(dateVal == null || dateVal == ''){
				isFormValid = false;
				setFieldInvalid(formGroup, 'Please select a date.', helpBlock)
			}
			else
				setFieldValid(formGroup, helpBlock);

			var formGroup = terms.closest('.checkbox');
			var helpBlock = formGroup.find("span.help-block");
			if(terms.is(':checked'))
				setFieldValid(formGroup, helpBlock);
			else{
				isFormValid = false;
				setFieldInvalid(formGroup, 'Please accept the terms.', helpBlock)
			}	
			
			if(isFormValid){
				formData = {};
				formData['trainerwaiverDate'] = dateVal;
				formData['waiverTerms'] = terms.val();
				formData['parqId'] = $('#form input[name="parqId"]').val();
				$.ajax({
					url: '../waiver/save',
					method: "POST",
					data: formData,
					success: function(data) {
						if(data == 'true'){
							modal.modal('hide');
						}
					}
				});	
			}
		});

		$('input[name="trainerwaiverDate"]').datepicker({autoclose:true, dateFormat:"D, d M yy"});
		$('#waiverModal').on('show.bs.modal', function(){
			var fName = $('#firstName').val(),
			lName = $('#lastName').val();
			$(this).find('input[name="waiver-client-name"]').val(fName+' '+lName);	
		});
		$('#waiverModal').on('hide.bs.modal', function(){
			var clientid = $('input[name="client_id"]').val();
			window.location.href = public_url+'client/'+clientid;
		});

		$('div#panel_assess_progress button#finish-parq-summary').click(function(){
			switchTab('#panel_overview')
			return false;
		});

		$('#addressModal button#addModalOk').click(function(){
			var modal = $(this).closest('.modal');
			var invalid = false;
			modal.find('.modal-body').find(':input').each(function(){
				if(!$(this).valid())
					invalid = true;
			});
			if(!invalid)
				modal.modal('hide');
		});
		$('#addressModal button#addModalCanc').click(function(){
			$('#addressModal input[name="addressline1"]').val('');
			$('#addressModal input[name="addressline2"]').val('');
			$('#addressModal input[name="city"]').val('');
			$('#addressModal select[name="country"]').val('');
			$('#addressModal select[name="addrState"]').val('');
			$('#addressModal input[name="postal_code"]').val('');
			$('#addressModal select[name="timezone"]').val('');
			$('#addressModal select[name="currency"]').val('');
		});
		$('#addressModal select[name="country"]').on('changed.bs.select', function (e) {
			updateState();
		});
		updateState();


		$('.closeModal').change(function(){
			var $this = $(this),
			modal = $this.closest("div.modal"),
			modalId = modal.attr('id'),
			chkboxs = modal.find('.injuryList').find('input[type="checkbox"]');

			if($this.is(':checked')){
				if(modalId == 'goalModal')
					chkboxs.prop('checked', true)
				else if(modalId == 'injuryModal')
					chkboxs.prop('checked', false)

				modal.modal('hide');	
			}
			else{
				if(modalId == 'goalModal')
					chkboxs.prop('checked', false)
				else if(modalId == 'injuryModal')
					chkboxs.prop('checked', true)
			} 
		});
		$(".bodyPartModal .injuryList input[type='checkbox']").change(function(){
			var $this = $(this),
			modal = $this.closest("div.modal"),
			modalId = modal.attr('id'),
			chkbox = modal.find('.closeModal');

			if(modalId == 'goalModal'){
				if(!$this.is(':checked')){
					if(chkbox.is(':checked'))
						chkbox.prop('checked', false)
				}
			}
			else if(modalId == 'injuryModal'){
				if($this.is(':checked')){
					if(chkbox.is(':checked'))
						chkbox.prop('checked', false)
				}
			}
		});
		$(".bodyPartModal").on('hide.bs.modal', function () {
			$(this).find('.injuryList').addClass('hidden')
		});
		if(!Main.isSmallDeviceFn()){
			$("#injuryModal").on('show.bs.modal', function () {
				loadBodyAreas($('#step-1').find("input[name='gender']:checked").val()=='Male' || $('input[name="gender"]').val() == 'Male' ?maleAreas:femaleAreas, $(this));
			});
			$("#goalModal").on('show.bs.modal', function () {
				loadBodyAreas($('#step-1').find("input[name='gender']:checked").val()=='Male' || $('input[name="gender"]').val() == 'Male' ?maleAreas:femaleAreas, $(this));
			});

			$("#movementModal").on('show.bs.modal', function () {
				loadBodyAreas($('#step-1').find("input[name='gender']:checked").val()=='Male' || $('input[name="gender"]').val() == 'Male' ?maleAreas:femaleAreas, $(this));
				var stepnum = $(this).find('#stepHedding').first('li').find('a').data('stepnum');
				callLoadFunction();
				radioBtnAction(stepnum,'all');
			});
		}
		else{
			$('.bodyPartModal select.bodyPartsDd').change(function(){
				showInjuryList($(this).find('option:selected').data('part'), $(this).closest('.row'));
			});
			$(".bodyPartModal").on('show.bs.modal', function(){
				showInjuryList($(this).find('select.bodyPartsDd option:selected').data('part'), $(this).closest('.row'));
			});

			$("#movementModal").on('show.bs.modal', function () {
				var stepnum = $(this).find('#stepHedding').first('li').find('a').data('stepnum');
				showMovementList(stepnum);
				callLoadFunction();
				radioBtnAction(stepnum,'all');
			});

			$('#movementModal select.bodyPartsDd').change(function(){
				var selectedStep = $(this).closest('fieldset'),
				part = $(this).find('option:selected').data('part');
				selectedStep.find('.injuryList').addClass('hidden');
				selectedStep.find('.'+part).removeClass('hidden');
			});
		}

		$.get('../clients/'+$('#form input[name="client_id"]').val()+'/co', function(data){
			$("#clientList, #refereModalClientList").typeahead({ 
				source:data, 
				items:'all', 
				afterSelect:function(selection){
					$('input[name="clientId"]').val(selection.id);
				//$('input[name="isReferenceDeleted"]').val('');
			}
		});
		},'json');
		$.get('../staffs/all', function(data){
			$("#staffList, #refereModalStaffList").typeahead({ 
				source:data, 
				items:'all', 
				afterSelect:function(selection){
					$('input[name="staffId"]').val(selection.id);
				//$('input[name="isReferenceDeleted"]').val('');
			}
		});
		},'json');
		$.get('../contacts/all', function(data){
		/*$("#proList, #refereModalProList").typeahead({ 
			highlighter: function(item){
    			var data = item.split('|');
    			return data[0]+'<br><span>'+data[1];
    		},
			source:data, 
			items:'all', 
			afterSelect:function(selection){
				$('input[name="proId"]').val(selection.id);
				$('input[name="isReferenceDeleted"]').val('');
			}
		});*/
		contactTypeahead($('#proList'), data)
		contactTypeahead($('#refereModalProList'), data)
	},'json');



		$('.closeContactNoteSubview').on('click', closeContactNoteSubview);
		$eventDetail = $('.summernote');
		$('.summernote').summernote({
			oninit: function() {
				if ($eventDetail.code() == "" || $eventDetail.code().replace(/(<([^>]+)>)/ig, "") == "") {
					$eventDetail.code($eventDetail.attr("placeholder"));
				}
			},
			onfocus: function(e) {
				if ($eventDetail.code() == $eventDetail.attr("placeholder")) {
					$eventDetail.code("");
				}
			},
			onblur: function(e) {
				if ($eventDetail.code() == "" || $eventDetail.code().replace(/(<([^>]+)>)/ig, "") == "") {
					$eventDetail.code($eventDetail.attr("placeholder"));
				}
			},
			toolbar: [
			['style', ['bold', 'italic', 'underline', 'clear']],
			['color', ['color']],
			['para', ['ul', 'ol', 'paragraph']],
			]
		});

		$('input[name="contactCbkDate"]').datepicker({autoclose:true, dateFormat:"D, d M yy"});
		
		$('ul#salesProcess i.fa:not(.sales-pencile)').click(function(e){
			e.stopImmediatePropagation();
			e.preventDefault();

			var step = $(this).parent();
			var  $this= $(this);

		if(!$(this).hasClass('fa-square-o')){ //Step completed already
			swal({
				title: 'Do you want to mark step as incomplete?',
				allowOutsideClick: true,
				showCancelButton: true,
				confirmButtonText: 'Yes',
				confirmButtonColor: '#ff4401',
				cancelButtonText: "No"
			}, 
			function(isConfirm){
				if(isConfirm){
					var formData = {};
					formData['action'] = 'incomplete';
					formData['stepNumb'] = step.data('step-number');

	        		if($.inArray(formData['stepNumb'], sessionSteps()) > -1){ //Team/indiv step
	        			var stepType = step.data('step-type'),
	        			lastComp =  $('a[data-step-type="'+stepType+'"] i.fa-check-square-o').last();

	        			if(lastComp.length){
	        				var lastCompPar = lastComp.parent(),
	        				lastCompType = lastCompPar.data('book-type'),
	        				bookType = step.data('book-type');

	        				if(lastCompType == bookType){ //Last completed step is same as chosen step
	        					setTimeout(function(){
	        						if(stepType == 'book'){
	        							if(bookType == 'team'){
	        								var bookField = 'bookTeamCount',
	        								manualField = 'manualTeamCount';
	        							}
	        							else if(bookType == 'indiv'){
	        								var bookField = 'bookIndivCount',
	        								manualField = 'manualIndivCount';
	        							}
	        						}
	        						else if(stepType == 'attend'){
	        							if(bookType == 'team'){
	        								var bookField = 'bookTeamedCount',
	        								manualField = 'manualTeamedCount';
	        							}
	        							else if(bookType == 'indiv'){
	        								var bookField = 'manualIndivedCount',
	        								manualField = 'manualIndivedCount';
	        							}
	        						}
	        						/*console.log($('input[name="'+bookField+'"]').val())
	        						console.log($('input[name="'+manualField+'"]').val())*/

	        						if($('input[name="'+bookField+'"]').val() > 0)
	        							var showCancelBtn = true;
	        						else
	        							var showCancelBtn = false;

	        						if($('input[name="'+manualField+'"]').val() > 0)
	        							var showConfirmBtn = true;
	        						else
	        							var showConfirmBtn = false;


	        						swal({
	        							title: 'Only last step can be unchecked in the session.',
	        							text: 'Which one shall we remove?',
	        							allowOutsideClick: true,
	        							showConfirmButton: showConfirmBtn,
	        							showCancelButton: showCancelBtn,
	        							confirmButtonText: 'Manual',
	        							confirmButtonColor: '#ff4401',
	        							cancelButtonText: "Booking"
	        						}, 
	        						function(isConfirm){
							        	if(isConfirm){ //Remove manual
							        		formData['stepNumb'] = lastCompPar.data('step-number');
							        		formData['stepType'] = stepType;
							        		formData['bookType'] = bookType;
							        		updateSalesStepAjax(formData ,$this);
							        	}
							        	else{ //Remove booking
							        		var clientId =  $('#clientId').val();
							        		extra = '&removeStepType='+stepType+'&removeBookType='+bookType;
							        		openSubview('calendar', 'clientId='+clientId+extra);
							        		subviewOpen = true;
							        	}
							        });
	        					}, 500)
	        				}
	        				else{
	        					setTimeout(function(){
	        						swal({
	        							title: 'Last completed step is different than this step.',
	        							text: 'Please reorder steps.',
	        							allowOutsideClick: true,
	        							confirmButtonText: 'Okay',
	        							confirmButtonColor: '#ff4401'
	        						});
	        					}, 500)
	        				}
	        			}
	        		}
	        		else
	        			updateSalesStepAjax(formData, $this);
	        	}
	        });
		}
		else{ //Step is incomplete
			// if(!dependingStepComp(step)){
			// 	return false;
			// }
			var stepNumber = $this.closest('a').data('step-number');
			var formData = {};
			formData['stepNumb'] = step.data('step-number');
			var salesName = $('a[data-step-number="'+stepNumber+'"]').find('.desc').text();
			console.log(salesName);
			var bookDate = $('a[data-step-number="'+stepNumber+'"]').find('.editFieldModal').data('value');
			var currentDate = new Date();
			var array =[1,18,2,4,6,7,8,9,10,12,13,14,15,16];
			if(new Date(bookDate) < currentDate || ($.inArray(formData['stepNumb'],array) > -1)){
				swal({
					title: "Do you want to mark step " +salesName+" as complete?",
					allowOutsideClick: true,
					showCancelButton: true,
					confirmButtonText: 'Yes',
					confirmButtonColor: '#ff4401',
					cancelButtonText: "No"
				}, 
				function(isConfirm){
					if(isConfirm){
						
						formData['action'] = 'complete';
						stepData = formData['stepNumb'];
						formData['completeMark'] = 1;
						updateSalesStepAjax(formData, $this);
							
					}
				});
			}else{
				console.log('ji');
				$('#sales_msg').show();
				$('html, body').animate({
					scrollTop: $("#page-title").offset().top
				}, 2000);
				setTimeout(function() {
					$('#sales_msg').fadeOut("slow");
					}, 10000 );
				
		
			}
		}
	});
	$('ul#salesProcess a.todo-actions').click(function(e){//.conditionalSubview
		e.preventDefault();

		var $this = $(this);

		/*if($this.data('step-number') == 2){
			e.stopImmediatePropagation();
			return false;
		}*/

		var stepComplete = isStepComplete($this);
		if(stepComplete){
			e.stopImmediatePropagation();
			return false;
		}
		/*if($this.data('step-dependant')){
			if(!dependingStepComp($this.data('step-dependant'))){
				e.stopImmediatePropagation();
				return false;
			}
		}*/
		// if(!dependingStepComp($this)){
		// 	e.stopImmediatePropagation();
		// 	return false;
		// }

		if(!stepComplete){
			if(ifPauseSalesProcess()){
				e.stopImmediatePropagation();
				return false;
			}

			prcoessStepBookedAlready($this.data('step-number'))

			/*if($this.data('step-number') == 1){
				var salesProcessRelatedStatus = calcSalesProcessRelatedStatus($this.data('step-number'));
				if(!statusMatchSalesStatus($('td[data-realtime="accStatus"]:first span').text(), salesProcessRelatedStatus['clientPrevStatus'])){
					e.stopImmediatePropagation();
					return false;
				}
			}*/
		}
		
		if($this.data('target-subview') == 'contact'){
			toggleContactNotesInSubview('list')
			resetContactNoteForm();
			$('#contact_note').show("slide", {direction:"right"}, 200);
		}
		else if($this.data('step-number') == '18'){//10
			if(hasConsultDateExpired()) {
				swal({
					title: "Consultation date has expired.\n Do you still want to \n continue?",
					type: 'warning',
					allowEscapeKey: false,
					showConfirmButton: true,
					confirmButtonText: 'Yes',
					confirmButtonColor: '#ff4401',
					cancelButtonText: 'No',
					showCancelButton: true,
					allowOutsideClick: false,
					closeOnConfirm: false,
					closeOnCancel: true 
				},
				function(isConfirm) {
					if (isConfirm) {
						swal({
							title: 'Have you emailed the price to this client?',
							allowOutsideClick: true,
							showCancelButton: true,
							confirmButtonText: 'Yes',
							confirmButtonColor: '#ff4401',
							cancelButtonText: "No"
						}, 
						function(isConfirm){
							if(isConfirm){
								var formData = {};
								formData['stepNumb'] = $this.data('step-number');
								formData['clientId'] =  $('#clientId').val();

								$.post(public_url+'clients/sales-process/price-emailed', formData, function(data){
									var data = JSON.parse(data);
									if(data.status == "updated"){
										location.reload(true);
									}
								});
							}
						});
					}
				});

			} else {
				swal({
					title: 'Have you emailed the price to this client?',
					allowOutsideClick: true,
					showCancelButton: true,
					confirmButtonText: 'Yes',
					confirmButtonColor: '#ff4401',
					cancelButtonText: "No"
				}, 
				function(isConfirm){
					if(isConfirm){
						var formData = {};
						formData['stepNumb'] = $this.data('step-number');
						formData['clientId'] =  $('#clientId').val();

						$.post(public_url+'clients/sales-process/price-emailed', formData, function(data){
							var data = JSON.parse(data);
							if(data.status == "updated"){
								location.reload(true);
							}
						});
					}
				});
			}
		}
	});
	/*$('#contactStatus').change(function(){
		var form=$(this).closest('form');
		var f=form.find('.callback'), s=$('#contactCbkDate');
		var cTimeField=form.find('.getTimeField'), cTimeTxtField=$('#contactMadeTime');
		if($(this).val()=='contacted'){
			f.hide();
			s.prop('required', false);
			cTimeField.hide();
			cTimeTxtField.prop('required', false);
		}
		else{
			f.show();
			s.prop('required', true);
			cTimeField.show();
			cTimeTxtField.prop('required', true);
		}
		
	});*/

	//$('ul#salesProcess .fa-square-o').click(function(e){
		$('#contact_note [type="submit"]').click(function(e){
			e.preventDefault();

			var form = $(this).closest('form'),
			isFormValid = false,
			//customValid = true;
			formData = {}, 
			cn=$('#contact_note');
			var status = cn.find('#contactStatus').val();
			var notes = cn.find('#contactNote').code();
			var ckDate = cn.find('input[name="contactCbkDate"]').val();
			var notesVal = (notes == 'Write note here...' || !notes)?'':notes;


		/*if($(this).data('onlynotes') && status == '' && ckDate == ''){
			customValid = false;
			if( notesVal != '')
			   isFormValid = true;
		}*/

		//if(customValid){
			isFormValid = form.valid();
			if(form.find('.gender').length){
				var isGenderValid = validateGender(form, 'gender');
				if(!isGenderValid)
					isFormValid = false;
			}
		//}

		if(isFormValid){
			formData['gender'] = $('input[name="gender"]:checked').val();
			formData['status'] = status;
			if(formData['status'] == 'contacted'){
				formData['contactMadeOpt'] = cn.find('select[name="contactMadeOpt"]').val();

				if(formData['contactMadeOpt'] == 'ni')
					formData['clientStatus'] = cn.find('select[name="clientStatusInContactNotes"]').val();
			}

			if(formData['status'] != 'contacted' || formData['contactMadeOpt'] == 'cb'){
				/*if(formData['status'] != 'contacted'){*/
					formData['cbkdate'] = moment(ckDate, 'ddd, D MMM YYYY').format('YYYY-MM-DD');
					formData['contactTime'] = timeStringToDbTime(cn.find('input[name="contactMadeTime"]').val());
					/*}*/
				}

				formData['note'] = notesVal;
				formData['clientId'] = currentClientId;

				$.ajax({
					url: public_url+'sales/contact-note/save',
					method: "POST",
					data: formData,
					success: function(data){
						var data = JSON.parse(data);
						if(data.status == "added"){
							closeContactNoteSubview();
							if(formData['gender']){
								var p = $('.clientPreviewPics');
								p.attr('src', p[0].src.replace('noimage.gif',formData['gender'].toLowerCase()+'.gif'));
								cn.find('.gender').addClass('no-display');
							}

							if(formData['note'] && data.viewNotes){
								var createdDatetime = dbDateToDateString(formData['createdDatetime']);

								var divlength = $('#notesPanel .panel-body div').length;
								if(divlength >= 5)
									$('#notesPanel .panel-body div:last-child').remove();
								$('#notesPanel .panel-body').prepend('<div class="col-md-12 contact-'+data.noteId+'"><p><small>(Added from initial contact form)</small></p><p>'+formData['note']+'</p><p><small>Created on: '+createdDatetime+'&nbsp;&nbsp; | &nbsp;&nbsp;Category: Contact </small></p><hr class="notes-hr"></div>');

							//$('.contact-notes div:last-child').remove();
							$('.contact-notes').prepend('<div class="contact-'+data.noteId+'"><p><small>(Added from initial contact form)</small></p><p>'+formData['note']+'</p><p><small> Created on: '+createdDatetime+' </small></p><hr class="notes-hr"></div>');

							//$('#contact-notes div:last-child').remove();
							$('#contact-notes').prepend('<div class="contact-'+data.noteId+'"><p><small>(Added from initial contact form)</small></p><p>'+formData['note']+'</p><p><small> Created on: '+createdDatetime+' </small><a href="#notesModal" class="contact-edit text-primary m-r-10 m-l-10" data-toggle="modal" data-notes="'+formData['note']+'" data-notesid="'+data.noteId+'" data-type="contact"><i class="fa fa-pencil"></i></a> <a href="#" class="text-primary delete-notes" data-notesid="'+data.noteId+'" data-notestype="contact"><i class="fa fa-trash-o"></i></a></p><hr class="notes-hr"></div>');
						}

						/*if('changeStatus' in data){
							realTimeUpdate('accStatus', data.changeStatus);	
						}

						if('salesProcessDate' in data){
							var c = $('ul#salesProcess a.todo-actions[data-step-number="1"]');
							markStepComplete(c, data.salesProcessDate);

							prcoessStepBookedAlready(2);

							$('#contact_note .callSubview').trigger('click')
						}*/
						if('salesProcessDate' in data){
							realTimeUpdate('accStatus', data.changeStatus);
							subviewOpen = false;
							$('ul#salesProcess a.todo-actions[data-step-number="2"]').trigger('click')
							if(!subviewOpen)
								location.reload(true);
						}
						else if('changeStatus' in data)
							location.reload(true);
					}
				}
			});
			}
		//else if(!customValid){
			//$('#contact_note').hide("slide", {direction:"right"}, 500);
		//}
	});


$(".checkbox input[value=All]").on('click', function(){
	$(this).closest('.form-group').find('input[type=checkbox]').attr('checked', this.checked);
});
$(".checkbox input[value=L_All], .checkbox input[value=R_All]").on('click', function(){
	var a=this.value.substr(0,2), c=this.checked;
	$(this).closest('.form-group').find('input[type=checkbox]').each(function(k,ele){
		if (ele.value.indexOf(a) == 0) {
			ele.checked = c;
		}
	})
});

$("#myModal #accordion").on('shown.bs.collapse', function(e){
	var input = $(e.target).find('input')
	value = input.val();

	input.focus().val('').val(value)
});

$("#myModal #accordion input").on('keydown', function(e){
	if(e.keyCode == 13){
		var thisAccord = $(this).closest('.collapse'),
		nextPanel = thisAccord.closest('.panel').next();

		if(nextPanel.length){
			thisAccord.collapse('hide');
			nextPanel.children('.collapse').collapse('show');
		}
	}
});

$("#showBenchmarkBox").click(function (e){
	$('.bm_time_manual').show();
});

/* start: Open specific tab on page load */
var hash = window.location.hash;
if(hash){
	hashs = hash.split('#')
	hashs.splice(0,1);
	if(hashs.length>1){
		$.each(hashs, function(key, value){
			if(key == 0)
				switchTab('#'+value)
			else{
				var param = value.split('=');
					/*if(param[0] == 'accId'){
						$('#'+param[1]).trigger('click');
					}
					else*/ if(param[0] == 'step'){
						$('#wizard').smartWizard("goToStep", param[1]);
					}
				}
			})
	}
}
/* end: Open specific tab on page load */

/* start: SCRIPTS FOR SUBVIEW*/
$('.callSubview').click(function(e){
	e.preventDefault();
	var $this = $(this),
	clientId =  $('#clientId').val();
	var extra = '';
		if(!dependingStepComp($this)){
			e.stopImmediatePropagation();
			return false;
		}
	if($this.hasClass('todo-actions'))
		salesProcessStepNumb = $this.data('step-number')
	else
		salesProcessStepNumb = 2;
		// console.log(hasConsultDateExpired());
		if(salesProcessStepNumb > 3){
			if(hasConsultDateExpired()) {
				return swal({
					title: "Consultation date has expired.\n Do you still want to \n continue?",
					type: 'warning',
					allowEscapeKey: false,
					showConfirmButton: true,
					confirmButtonText: 'Yes',
					confirmButtonColor: '#ff4401',
					cancelButtonText: 'No',
					showCancelButton: true,
					allowOutsideClick: false
				},
				function(isConfirm) {
					if (isConfirm) {
						extra = '&consultationRestriction=true&enableDatePeriod=15';
						openSubview($this, 'clientId='+clientId+extra);
						subviewOpen = true;
					}
				});
			}
			extra = '&consultationRestriction=true&enableDatePeriod=15';
		}
		else
			var extra = '';

		openSubview($(this), 'clientId='+clientId+extra);

		subviewOpen = true;
	});
/* end: SCRIPTS FOR SUBVIEW*/

	/*$('select[name="clientStatusUnderSalesProcess"]').focus(function () {
		$this = $(this);
		console.log($this.val());
		alert('alert');
		$this.data('prevdata',$this.val());
	});*/
	
	$('select[name="clientStatusUnderSalesProcess"]').change(function(){
		var $this = $(this),
		formData = {entityId:$('#currentClientId').val(), entityProperty:$this.data('realtime'), accStatus:$this.val()};

		confirmSwalPopup(function(){
			swal.close();
			if((formData.accStatus != 'active' && formData.accStatus != 'contra') || canMakeClientActive('clientStatusUnderSalesProcess('+JSON.stringify(formData)+')')){
				clientStatusUnderSalesProcess(formData)
			}
		},
		function(){
			var preValue=$this.data('prevdata');
			$this.val(preValue);
			$this.selectpicker('refresh');
		});
	});

	/*$('input[name="dateFrom"]').datepicker({
	    autoclose:true,
	    dateFormat:"d M yy",
	    startDate: new Date(),
	    onSelect: function( newText ){
	        nextdate = "'"+newText+"'";
	        console.log(nextdate);
        }
	});

	$( 'input[name="dateTo"]' ).datepicker( "refresh" );

	$('input[name="dateTo"]').datepicker({
	    autoclose:true,
	    dateFormat:"d M yy",
	    minDate: "'"+nextdate+"'"
	});
	*/

	// new datepicker code
	$('input[name="dateFrom"]').datepicker();
	$('input[name="dateFrom"]').change(function(){
		$('input[name="dateTo"]').datepicker('destroy');
		$('input[name="dateTo"]').datepicker({ 
			minDate:$(this).val()
		});
	});

	$('.notes-create').click(function(e){
		e.preventDefault();

		var form = $('#notes-form'),
		isFormValid = form.valid();
		var notestype=$('select#notesType').val();	
		var notes_id=$('[name="notes_id"]').val();

		if(isFormValid){
			var formData = {};
			if(notestype != '' || notestype != undefined)
				formData['notestype']=notestype;
			formData['note'] = $('textarea[name=note]').val();
			formData['clientId'] = $('#clientId').val();
			if(notes_id != ''){
				formData['notesId']=notes_id;
				//formData['notesType']=$('[name="notes_type"]').val();
				
				$.ajax({
					url: public_url+'sales/edit-client-note/'+notes_id,
					method: "POST",
					data: formData,
					success: function(data){
						var data = JSON.parse(data);
						if(data.status == "updated"){
							//closeContactNoteSubview();
							$('#notesModal').modal('hide');
							reloadPageWithTab('#notes-details');
							//window.location.reload();
						}
					}
				});
			}
			else{
				$.ajax({
					url: public_url+'sales/create-client-note/save',
					method: "POST",
					data: formData,
					success: function(data){
						var data = JSON.parse(data);
						if(data.status == "added"){
							//closeContactNoteSubview();
							$('#notesModal').modal('hide');
							reloadPageWithTab('#notes-details');
						}
					}
				});
			}
		}
	});
	
	$('.check-notes-btn').click(function(e){
		$('.check-notes-type').removeClass('hidden'); 	
	});

	$('#notesModal').on("show.bs.modal", function (e) {
		var elem=$(e.relatedTarget);
		var notes=elem.data('notes');
		var notes_id=elem.data('notesid');
		var notes_type=elem.data('type');

		$(this).find('[name="note"]').val(notes);
		//$(this).find('[name="notes_type"]').val(notes_type);
		$(this).find('[name="type"]').val(notes_type);
		$(this).find('[name="type"]').selectpicker('refresh');
		$(this).find('[name="notes_id"]').val(notes_id);
	});

	$('#notesModal').on("hide.bs.modal", function (e) {
		var notes=$('textarea[name=note]');
		var notestype=$('select#notesType');
		setFieldNeutral(notes);
		setFieldNeutral(notestype);
		$(this).find('[name="notes_id"]').val('');
		notes.val('');
		notestype.val('').selectpicker('refresh');
		$('.check-notes-type').addClass('hidden');	
	});

	//$('.delete-notes').click(function(e){
		$('body').on('click', '.delete-notes', function(e){
			e.preventDefault();
		//$this=$(this);
		var cn_id = $(this).data('notesid');
		var type = $(this).data('notestype');
		swal({

			title: "Are you sure to delete this note?",
			text: (typeof warningText != 'undefined' && warningText)?warningText:'',
			type: "warning",
			showCancelButton: true,
			confirmButtonColor: "#d43f3a",
			confirmButtonText: "Yes, delete it!",
			allowOutsideClick: true,
			customClass: 'delete-alert'

		}, 
		function(isConfirm){
			if(isConfirm){
				$.ajax({
					url: public_url+'notes-delete/'+cn_id,
					method: "delete",
					data: {},
					success: function(data){
						var data = JSON.parse(data);
						if(data.status == "deleted"){
							$('.'+type+'-'+cn_id).hide();
						}
					}
				});
			}	
		});
		
		
	});

		/* Start: NOTES CATEGORY */
		$('#notesCategory').on("show.bs.modal", function (e) {
			//console.log($(e.relatedTarget));
			var textfield = $(this).find('[name="catName"]');
			setFieldNeutral(textfield);
			textfield.val('');
		});

		$('#notesCategory .save').click(function(){
			var form = $('#categoryForm');
			var	isFormValid = form.valid(),
			formData={};

			if(isFormValid){
				formData['catName']=form.find('[name="catName"]').val();
				$.ajax({
					url: public_url+'notes-category',
					method: "POST",
					data: formData,
					success: function(data){
						var data = JSON.parse(data);
						if(data.status == "success"){
							$('#notesCategory').modal('hide');
							window.location.reload();
						}
					}
				});
			}
		});
		/* End: NOTES CATEGORY */

		/* Start: Sales Process Settings Modal */
		/*$("#salesSessionTypeSelectable").selectable({
			selected:function(){
				setSalesSessionType();
			}
		});*/
		
		$('#salesProcSettSub').click(function(){
			/*if($('#salesProcSettModal .team:checked').length && $('#salesProcSettModal .indiv:checked').length){
				showNotific(prepareNotific('error', 'Either choose T.E.A.M or Individual session.'), $('#salesProcSettModal .modal-body'));
				return false;
			}
			
			if($('#saleStep11').is(':checked') && !$('#salesProcSettModal .team:not(#saleStep11):checked').length){
				showNotific(prepareNotific('error', 'T.E.A.M can not be done without team booking.'), $('#salesProcSettModal .modal-body'));
				return false;
			}

			if($('#saleStep17').is(':checked') && !$('#salesProcSettModal .indiv:not(#saleStep17):checked').length){
				showNotific(prepareNotific('error', 'Individual can not be done without individual booking.'), $('#salesProcSettModal .modal-body'));
				return false;
			}*/

			/*var form = $('#salesProcSettModal form'),
				salesSessionType = form.find('[name="salesSessionType"]').val(),
				totalNumberField = form.find('[name="totalNumber"]');

			totalNumberField.prop('required', false);
			if(salesSessionType == 'indiv')
				var cb = $('#saleStep17');
			else if(salesSessionType == 'team')
				var cb = $('#saleStep11');

			if(cb.is(':checked')){
				totalNumberField.prop('required', true);
			}*/

			var form = $('#salesProcSettModal form');

			var totalNumberField = form.find('[name="teamNumb"]');
			totalNumberField.prop('required', false);
			var isBookTeamChecked = form.find('#saleStepBookTeam').is(':checked');
			if(isBookTeamChecked)
				totalNumberField.prop('required', true);

			var totalNumberField = form.find('[name="indivNumb"]');
			totalNumberField.prop('required', false);
			var isBookIndivChecked = form.find('#saleStepBookIndiv').is(':checked');
			if(isBookIndivChecked)
				totalNumberField.prop('required', true);



				/*checkbox11=form.find('#saleStep11'),
				checkbox17=form.find('#saleStep17'),
				totalNumber = form.find('[name="totalNumber"]'),
				totalNoVal=totalNumber.val();

			if(checkbox11.is(':checked') && totalNoVal == '' && !(checkbox11.closest('form-group').hasClass('hidden'))){
				alert('ok')
				totalNumber.prop('required',true);
			}
			else if(checkbox17.is(':checked') && totalNoVal == '' && !(checkbox17.closest('form-group').hasClass('hidden'))){
				alert('okk')
				totalNumber.prop('required',true);
			}
			else{
				alert('yo')
				totalNumber.prop('required',false);
			}*/
			
			if(form.valid()){
				if(!isBookIndivChecked){
					updateSalesSessionOrder('indiv', 0);
					$('#saleStep17').attr('checked', false);
				}

				if(!isBookTeamChecked){
					updateSalesSessionOrder('team', 0);
					$('#saleStep11').attr('checked', false);
				}
				form.submit();
			}
			

			
			/*if($('#saleStep11').is(':checked') && !$('#saleStep6').is(':checked') && !$('#saleStep7').is(':checked') && !$('#saleStep8').is(':checked')){
				showNotific(prepareNotific('error', 'T.E.A.M can not be done without team booking.'), $('#salesProcSettModal .modal-body'));
				return false;
			}
			else{
				var form = $('#salesProcSettModal form');
				form.submit();
			}

			return true;*/
		});

		$("#salesProcSettModal").on('show.bs.modal', function(evt){
			var modal=$(this);
			var errorMsg = modal.find('.modal-body');
			clearNotific(errorMsg);
			modal.find('.sales_checkbox').attr('checked', false);
			var data = modal.find('[name="sales_process_data"]').val();
			if(data){
				var dataArr = JSON.parse(data);
				$.each(dataArr.steps, function(key, value) {     
				  	//if($.inArray(value, dataArr.steps) > -1){
				  		modal.find('#saleStep'+value).attr('checked', true);
					//};
				});
				
				var cb = modal.find('#saleStepBookTeam');
				if(dataArr.teamCount != ""){
					cb.attr('checked', true);
					var totalNumberField = modal.find('[name="teamNumb"]');
					totalNumberField.val(dataArr.teamCount).selectpicker('refresh');
					setFieldNeutral(totalNumberField);
				}
				toggleSalesSession(cb);

				var cb = modal.find('#saleStepBookIndiv');
				if(dataArr.indivCount != ""){
					cb.attr('checked', true);
					var totalNumberField = modal.find('[name="indivNumb"]');
					totalNumberField.val(dataArr.indivCount).selectpicker('refresh');
					setFieldNeutral(totalNumberField);
				}
				toggleSalesSession(cb);

				/*$.each(dataArr.order, function(key, value){     
					console.log(value);
					//updateSalesSessionOrder();
				});*/
				/*var countData='';
				if(dataArr.teamCount != ""){
					countData=dataArr.teamCount;
					setSalesSessionType('team');
				}
				else if(dataArr.indivCount != ""){
					countData=dataArr.indivCount;
					setSalesSessionType('indiv');
				}

				var totalNumberField = modal.find('[name="totalNumber"]');
				totalNumberField.val(countData).selectpicker('refresh');
				setFieldNeutral(totalNumberField);*/
			}	
		});

		$('#salesProcSettModal #saleStep5').change(function(){
			if($(this).is(':checked')){
				$('#saleStep4').attr('checked', true);	
			}
		})
		$('#salesProcSettModal #saleStep4').change(function(){
			if(!$(this).is(':checked')){
				$('#saleStep5').attr('checked', false);	
			}
		})
		$('#salesProcSettModal [name="saleStepSession[]"]').change(function(){
			toggleSalesSession($(this));
		})
		$('#salesProcSettModal [name="teamNumb"]').change(function(){
			updateSalesSessionOrder('team', $(this).val());
		})
		$('#salesProcSettModal [name="indivNumb"]').change(function(){
			updateSalesSessionOrder('indiv', $(this).val());
		})
		/* End: Sales Process Settings Modal */

		/* Start: Redirct from dashboard on to-do link */
		var page = $.urlParam('page');
		if(page == 'dashboard'){
			var field = $('ul#salesProcess a.todo-actions');
			var stepValue = field.data('step-number');
			var stepComplete=0;
			if(stepValue == 1){
				var stepComplete = isStepComplete(field);
			}

			if(stepComplete || ifPauseSalesProcess()){
				$('.nav-tabs a[href="#notes-details"]').tab('show');
			}
			else{
				toggleContactNotesInSubview('list')
				resetContactNoteForm()
				$('#contact_note').show("slide", {direction:"right"}, 200);
		 		/*$('.noteWrap').hide();
		 		$('.notes-list').show();
		 		$('.notes-create-btn').show();
		 		$('#contact_note').show("slide", {direction:"right"}, 200);
		 		$('#contact_note [type="submit"]').data('onlynotes',1);

		 		$('.show-note').click(function(e){
			 		e.preventDefault();
			 		$('.noteWrap').hide();
			 		$('.notes-list').show();
			 		$(this).hide();
			 		$('.create-note').show();
			 	});

			 	$('.create-note').click(function(e){
			 		e.preventDefault();
			 		$('.noteWrap').show();
			 		$('.notes-list').hide();
			 		$(this).hide();
			 		$('.show-note').show();
			 	});*/
			 }
			}
			/* End: Redirct from dashboard on to-do link */

			/* Start: Contact step of Sales process */
			$('#contact_note .show-note').click(function(e){
				e.preventDefault();
				toggleContactNotesInSubview('list')
			});

			$('#contact_note .create-note').click(function(e){
				e.preventDefault();
				toggleContactNotesInSubview('create')
			});

			$('#contactStatus').change(function(){
		/*var form=$(this).closest('form');
		var f=form.find('.callback'), s=$('#contactCbkDate');
		var cTimeField=form.find('.getTimeField'), cTimeTxtField=$('#contactMadeTime');
		if($(this).val()=='contacted'){
			f.hide();
			s.prop('required', false);
			cTimeField.hide();
			cTimeTxtField.prop('required', false);
		}
		else{
			f.show();
			s.prop('required', true);
			cTimeField.show();
			cTimeTxtField.prop('required', true);
		}*/
		var contactMadeOpt = $('#contact_note select[name="contactMadeOpt"]'),
		contactMadeOptGroup = contactMadeOpt.closest('.form-group'),
		cbFields = $('#cbFields'),
		clientStatusGroup = $('#contact_note select[name="clientStatusInContactNotes"]').closest('.form-group');

		cbFields.show();
		clientStatusGroup.hide();
		if($(this).val() == 'contacted'){
			contactMadeOptGroup.show();
			if(contactMadeOpt.val() != 'cb')
				cbFields.hide();
			if(contactMadeOpt.val() == 'ni')
				clientStatusGroup.show();
		}
		else
			contactMadeOptGroup.hide();
	});

			$('#contact_note select[name="contactMadeOpt"]').change(function(){
				var cbFields = $('#cbFields'),
				clientStatusGroup = $('#contact_note select[name="clientStatusInContactNotes"]').closest('.form-group');

				cbFields.hide();
				clientStatusGroup.hide();

				if($(this).val() == 'cb')
					cbFields.show();		
				else if($(this).val() == 'ni')
					clientStatusGroup.show();		
			});
			/* End: Contact step of Sales process */

			/* Start: Realtime Expiration duration edit on clint overview */
			$('#expiringDurationModal').on('show.bs.modal',function(e){
				var elem = $(e.relatedTarget),
				modal = $(this);

				modal.find('input[name="duration"]').val(elem.data('duration'));
				modal.find('select[name="durationType"]').val(elem.data('type')).selectpicker('refresh');

			})
			$('#expiringDurationModal').on('hide.bs.modal',function(e){
				var modal = $('#expiringDurationModal'),
				duration = modal.find('input[name="duration"]'),
				durationType = modal.find('select[name="durationType"]');

				duration.val('');
				setFieldNeutral(duration)
				durationType.val('').selectpicker('refresh');
				setFieldNeutral(durationType);
			})

			$('#expiringDurationModal .submit').click(function(e){
				var modal = $('#expiringDurationModal'),
				form = modal.find('form'),
				isFormValid = form.valid(),
				formData = {};

				if(isFormValid){
					var consultationDate = $('.consult_date').data('value');
					formData['duration'] = form.find('input[name="duration"]').val();
					formData['durationType'] = form.find('select[name="durationType"]').val();
					var addValue='';
					if(formData['durationType']=='day')
						addValue = 'd';
					else if(formData['durationType']=='week')
						addValue = 'w';
					else if(formData['durationType']=='month')
						addValue = 'M';
					if(consultationDate != ''){
						formData['cun_exp_date'] = moment(consultationDate).add(formData['duration'], addValue).format('YYYY-MM-DD');
					}	
					formData['entityProperty'] = 'consultExpDuration';
					formData['entityId'] = currentClientId;

					$.ajax({
						url:public_url+'client/'+formData.entityId+'/update-field',
						data: formData,
						type:'POST',
						success:function(response){
							var data = JSON.parse(response);
							if(data.status == 'updated'){
								modal.modal('hide');
								$('[data-realtime="exp-duration"]').each(function(){
									var $elem = $(this),
									elemType = $elem.prop('nodeName');

									if(elemType == 'A' && $elem.hasClass('exp-dur-class')){
										$elem.data('type', formData['durationType']);
										$elem.data('duration', formData['duration']);
									}
									else if((formData['duration'] == null || formData['duration'] == '') && (formData['durationType'] == null || formData['durationType'] == ''))
										$elem.text('');
									else{
										$elem.text(formData['duration']+' '+ formData['durationType']+'(s)');
									}

								});
							}
						}
					});
				}

			})
			/* End: Realtime Expiration duration edit on clint overview */


		})

$('#printmodal').on('hide.bs.modal', function () {
	//alert(nextdate);
	$('select#appointmentstatusid').val('').selectpicker('refresh');
	$('select#printformatid').val('').selectpicker('refresh');
	var dateFrom = $('input[name="dateFrom"]');
	var dateTo = $('input[name="dateTo"]');
	setFieldNeutral($('select#appointmentstatusid'));
	setFieldNeutral($('select#printformatid'));
	setFieldNeutral(dateFrom);
	setFieldNeutral(dateTo);

});

$('#printmodal').on('show.bs.modal', function () {
	clearForm($(this).find('form'));
});

/*$('#printbtn').on('click', function () {
	var form = $('#printForm');
	var isValid = form.valid();
	if(isValid){
		var status = $('select#appointmentstatusid').val();
		//var shownotes = $('#checkbox1').val();
		var datefrom = $('input[name="dateFrom"]').val();
		var dateto = $('input[name="dateTo"]').val();
		//console.log($('#checkbox1').val());
		//console.log($('#checkbox1').prop());
		//console.log(datefrom);
		//console.log(dateto);
		window.location.href = public_url+'clients/print-appointments';
	}
});*/

$('.togglebtn').click(function(e){
	e.preventDefault();
	if($('.step-create').hasClass("hidden")){
		//alert("create has hidden");
		$('.step-create').removeClass('hidden');
		$('#form').attr('data-form-mode','create');
		$('.step-show').addClass('hidden');
	}
	else if($('.step-show').hasClass("hidden")){
    	//alert("show has hidden");
    	$('.step-show').removeClass('hidden');
    	$('#form').attr('data-form-mode','view');
    	$('.step-create').addClass('hidden');
    }
});



/*function resetCheckBox(fieldGroup){
	if(fieldGroup != 'undefined' || fieldGroup != ''){
		fieldGroup.find('.sales_checkbox').attr('checked', false);
		$.each(fieldGroup.find('input[type="checkbox"]').serializeArray(), function(i, obj){
            obj.attr('checked', false);
            console.log(obj);
        });
	}
}*/

/* Start: Return URL */
$.urlParam = function(name){
	if(name == 'undefined' || name == null || name == '')
		return 0;
	var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
	if(results != null)
		return results[1] || 0;
}
/* End: Return URL */

/*** Change Height and Weight metric system ****/
$('body').on('click','#heightUnit',function(){
	var currUnit = $('input[name="heightUnit"]').val();
	if(currUnit == 'Metric'){
		$(this).text('Show Metric');
		$($('input[name="heightUnit"]')).val('Imperial');
		var heightMetric=$('input[name="height_metric"]').val(); 
        var inches = (heightMetric*0.393700787).toFixed(0);
        var feet = Math.floor(inches / 12);
        inches %= 12;
        if(feet == 0 || feet == 0.0)
        {
       	
        $('input[name="height_imperial_ft"]').val('');
        $('input[name="height_imperial_inch"]').val('');
         }
        else
         {
        
        $('input[name="height_imperial_ft"]').val(feet);
        $('input[name="height_imperial_inch"]').val(inches);
         }

	}else{
		$(this).text('Show Imperial');
		$($('input[name="heightUnit"]')).val('Metric');
		var height_imperial_ft=$('input[name="height_imperial_ft"]').val(); 
		var height_imperial_inch=$('input[name="height_imperial_inch"]').val(); 
        var ft = parseFloat(height_imperial_ft * 30.48);
        var inches= parseFloat(height_imperial_inch * 2.54);
        var result = parseFloat(ft + inches).toFixed(1);

         if(result == 0 || result == 0.0)
        {
       	$('input[name="height_metric"]').val('');
         }
        else
         {
        $('input[name="height_metric"]').val(result);
         }


	}
	$('div.heightMetric').toggleClass('hidden');
	$('div.heightImperial').toggleClass('hidden');
});

$('body').on('click','#weightUnit',function(){
	var currUnit = $('input[name="weightUnit"]').val();
	if(currUnit == 'Metric'){
		$(this).text('Show Metric');
		$($('input[name="weightUnit"]')).val('Imperial');
		var weight = $('input[name="weight_metric"]').val();

       weightInPounds = (weight*2.2046226218); 
       result = weightInPounds.toFixed(1);
       if(result == 0 || result == 0.0)
       {
       	$('input[name="weight_imperial"]').val('');
       }
       else
       {
      $('input[name="weight_imperial"]').val(result);
       }
	}else{
		$(this).text('Show Imperial');
		$($('input[name="weightUnit"]')).val('Metric');
	   var weight = $('input[name="weight_imperial"]').val();
       weightInPounds = (weight/2.2046226218); 
       result = weightInPounds.toFixed(0);
       if(result == 0 || result == 0.0)
       {
       	$('input[name="weight_metric"]').val('');
       }
       else
       {
      $('input[name="weight_metric"]').val(result);
       }
	}
	$('div.weightMetric').toggleClass('hidden');
	$('div.weightImperial').toggleClass('hidden');
});
   
// 	$('select.smartG').on('changed.bs.select', function(e, clickedIndex, newValue){
// 			var $this = $(this);

// 			if(clickedIndex == 0){
// 				$this.find('option:not([value="None"])').prop('selected', false);
// 				$this.closest('.form-group').find('input[type="hidden"]').val('')
// 				$this.parent().removeClass('open');
// 			}
// 			else{
// 				if(newValue)
// 					smartGoalNotes($this.attr('name'), clickedIndex)
// 				else{
// 					var allNotesField = $this.closest('.form-group').find('input[type="hidden"]'),
// 					allNotes = allNotesField.val(),
// 					opt = $this.find('option').eq(clickedIndex).attr('value');

					
					
// 				}

// 				$this.find('option[value="None"]').prop('selected', false)
// 			}

// 			$this.selectpicker('refresh')
// 		});


// $("#smartGoal .submit").click(function(){
// 		var modal = $(this).closest('div.modal'),
// 			notes = modal.find('textarea').val();

// 		if(notes){
// 			var entity = modal.find('input[name="entity"]').val(),
// 				dd = $('select[name="'+entity+'"]'),
// 				allNotesField = dd.closest('.vp-item').find('input[type="hidden"]'),
// 				allNotes = allNotesField.val(),
// 				entityOptIdx = modal.find('input[name="entityOptIdx"]').val(),
// 				opt = dd.find('option').eq(entityOptIdx).attr('value');
			
			     
//                  if(opt == "Specific"){
// 					var html = '<div class="form-group" data-option-val="'+opt+'">\
// 					<label class="strong medinotes">Specific </label>\
// 					<input class="form-control" value="'+notes+'" name="smartGoalSpecific">\
// 					</div>';
					
// 				}
// 		          if(opt == "Measurable"){
// 					var html = '<div class="form-group" data-option-val="'+opt+'">\
// 					<label class="strong medinotes">Measurable </label>\
// 					<input class="form-control" value="'+notes+'" name="smartGoalMeasurable">\
// 					</div>';
					
// 				}
// 			      if(opt == "Achievable"){
// 					var html = '<div class="form-group" data-option-val="'+opt+'">\
// 					<label class="strong medinotes">Achievable </label>\
// 					<input class="form-control" value="'+notes+'" name="smartGoalAchievable">\
// 					</div>';
					
// 				}
// 				if(opt == "Relevant"){
// 					var html = '<div class="form-group" data-option-val="'+opt+'">\
// 					<label class="strong medinotes">Relevant </label>\
// 					<input class="form-control" value="'+notes+'" name="smartGoalRelevent">\
// 					</div>';
					
// 				}
// 				if(opt == "Time"){
// 					var html = '<div class="form-group" data-option-val="'+opt+'">\
// 					<label class="strong medinotes">Time </label>\
// 					<input class="form-control" value="'+notes+'" name="smartGoalTime">\
// 					</div>';
					
// 				}
					
// 			$('.med_notes1').append(html);
			

// 		}
// 	});


	function smartGoalNotes(dd, clickedIndex){
		var modal = $('#smartGoal');

		modal.find('input[name="entity"]').val(dd)
		modal.find('input[name="entityOptIdx"]').val(clickedIndex)
		modal.find('textarea').val('')
		modal.modal('show');
	}

	$('select[name="smart_goal_option"]').change(function(){

		var allVal = $(this).val();
	
			$('.med_notes1 .form-group').each(function(){
				
				if($.inArray($(this).data('option-val'),allVal) < 0){
					$(this).remove();
				
				}
			});
		});

	$(document).ready(function() {
	$('.email-login').change(function(){
        togglePasswordFieldset($(this))
    });
    togglePasswordFieldset();
    });
    function togglePasswordFieldset(cb){
    if(typeof cb == 'undefined')
        cb = $('.email-login');
	cb.each(function(){
        var $this = $(this),
        pwdFieldset = $('.js-pwdFieldset');
        if(pwdFieldset.length){
        if(/*$this.data('old-login-with-email') &&*/ $this.is(':checked'))
            pwdFieldset.show();
        else
            pwdFieldset.hide();
        }
    });
}

$('.updatePassword').on('click', function() { 
var formData = {};
        var clientId = $("input[name='client_id']").val();
        formData['entityId']=clientId;
	    formData['login_with_email'] =$("input[name='login_with_email']").val();
		formData['clientNewPwd']= $("input[name='clientNewPwd']").val();
		formData['clientNewPwdCnfm'] = $("input[name='clientNewPwdCnfm']").val();

		if(formData['clientNewPwd'] == formData['clientNewPwdCnfm'])
		{

		$.post(public_url+'client/'+clientId+'/update-field',formData,function(response){
			swal({
		        title: "Password updated successfully",
		        type: 'success',
		        allowOutsideClick: true,
		        showCancelButton: true,
		        confirmButtonText: 'okay',
		        confirmButtonColor: '#ff4401'
		    }, 
		    function(isConfirm){
				if(isConfirm)
					return false;
			});
			return false;
				});
	}
	else{
		swal({
		        title: "Password and confirm password does not match",
		        type: 'warning',
		        allowOutsideClick: true,
		        showCancelButton: true,
		        confirmButtonText: 'okay',
		        confirmButtonColor: '#ff4401'
		    }, 
		    function(isConfirm){
				if(isConfirm)
					return false;
			});
			return false;
	}
});
$('.openSmartGoal').on('click',function(){

			$('.smartgoalNote').each(function(){
			var $this = $(this),
		     data = $this.closest('div').data('is-filled');
             if(data == 0){
             	$(this).modal('show');

             	return false;
             }
		    
			});
		 //    var modal= $('#specificGoal');
			// modal.modal('show');
		
		
	});

	$('#specific').on('click',function()
	{
		var modal= $('#specificGoal');
			notes = modal.find('textarea').val();
        var html = '<div class="form-group" data-option-val="Specific">\
					<label class="strong medinotes">Specific </label>\
					<input class="form-control" value="'+notes+'" name="smartGoalSpecific">\
					</div>';
		$('.goal_notes').append(html);
		$('#specificGoal').hide();
		modal.data('is-filled','1');
		var measurable= $('#MeasurableGoal');
		measurable.modal('show');
	});
   
    $('#measurable').on('click',function()
	{
		var modal= $('#MeasurableGoal');
			notes = modal.find('textarea').val();
        var html = '<div class="form-group" data-option-val="Measurable">\
					<label class="strong medinotes">Measurable </label>\
					<input class="form-control" value="'+notes+'" name="smartGoalMeasurable">\
					</div>';
		$('.goal_notes').append(html);
		$('#MeasurableGoal').hide();
		modal.data('is-filled','1');
		var achievable= $('#AchievableGoal');
		achievable.modal('show');
	});

	$('#achievable').on('click',function()
	{
		var modal= $('#AchievableGoal');
			notes = modal.find('textarea').val();
        var html = '<div class="form-group" data-option-val="Achievable">\
					<label class="strong medinotes">Achievable </label>\
					<input class="form-control" value="'+notes+'" name="smartGoalAchievable">\
					</div>';
		$('.goal_notes').append(html);
		$('#AchievableGoal').hide();
		modal.data('is-filled','1');
		var relevant= $('#RelevantGoal');
		relevant.modal('show');
	});

	$('#relevent').on('click',function()
	{
		var modal= $('#RelevantGoal');
			notes = modal.find('textarea').val();
        var html = '<div class="form-group" data-option-val="Relevant">\
					<label class="strong medinotes">Relevant </label>\
					<input class="form-control" value="'+notes+'" name="smartGoalRelevent">\
					</div>';
		$('.goal_notes').append(html);
		$('#RelevantGoal').hide();
		modal.data('is-filled','1');
		var relevant= $('#TimeGoal');
		relevant.modal('show');
	});
	$('#time').on('click',function()
	{
		var modal= $('#TimeGoal');
			notes = modal.find('textarea').val();
        var html = '<div class="form-group" data-option-val="Time">\
					<label class="strong medinotes">Time </label>\
					<input class="form-control" value="'+notes+'" name="smartGoalTime">\
					</div>';
		$('.goal_notes').append(html);
		$('#TimeGoal').hide();
		modal.data('is-filled','1');
		$('.openSmartGoal').hide();
	});


